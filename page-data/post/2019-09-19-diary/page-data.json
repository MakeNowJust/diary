{"componentChunkName":"component---src-templates-post-js","path":"/post/2019-09-19-diary/","webpackCompilationHash":"062a336c1f05499608dd","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>ミリシタ</h2>\n<p>TC最初のイベントのはじまり。<br>\nちょっとだけやる気があるのだけど、目下の悩みはSSA。<br>\nあと2日とか実感がねえ。</p>\n<h2>シャニ</h2>\n<p>MVP取れた。<br>\nMVPのコミュ良かった。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1174629419610066945\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1174629419610066945</a></p>\n<p>今度は灯織で感謝祭していた。<br>\nようやく星3ノートクリアできた。<br>\nしんどすぎるんじゃ。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1174638867267248128\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1174638867267248128</a></p>\n<p><a href=\"https://twitter.com/make_now_just/status/1174640126384689154\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1174640126384689154</a></p>\n<h2>daliのスライド</h2>\n<p>daliの開発はsbtがJDK 13で壊れた影響で完全に止まっている。<br>\n許せ‥‥。</p>\n<p>というわけでスライドを公開した。</p>\n<p><a href=\"https://speakerdeck.com/makenowjust/dali-introduction\" class=\"embedly-card\">https://speakerdeck.com/makenowjust/dali-introduction</a></p>\n<p>まあ大した内容ではないが。</p>\n<h2>implicit完全に理解した</h2>\n<p>迷ったときは仕様を読むと良い。</p>\n<p><a href=\"https://www.scala-lang.org/files/archive/spec/2.13/07-implicits.html#implicit-parameters\" class=\"embedly-card\">https://www.scala-lang.org/files/archive/spec/2.13/07-implicits.html#implicit-parameters</a></p>\n<p><code>implicit</code>な値の宣言が<code>implicit</code>パラメータを持つとき、<code>implicit</code>な値は再帰的に探索されていく。<br>\nそこで見つかった型とその型を提供する<code>implicit</code>な値の宣言はスタックに積まれる。<br>\nさらに、探索が無限ループに陥らないようにするため、スタックの状態によっては探索を打ち切る場合がある。<br>\n(探索を打ち切る=探索失敗ではないので注意)</p>\n<ul>\n<li>スタックに積もうとしてる型と等しい型があって、その型のあるスタック上の位置と先頭までの間にby nameな宣言がある場合、スタックのそこまでを<code>lazy val</code>でくくり出して、成功で探索を打ち切る。</li>\n<li>スタックに積もうとしてる型が<strong>支配する</strong> (<em>dominate</em>する)がスタック上にある場合、divergingとして失敗で探索を打ち切る。</li>\n<li>それ意外の場合、スタックに型と宣言を追加して、探索を継続する。</li>\n</ul>\n<p>で、この「<strong>支配する</strong>」という条件が曲者で、詳細は次のようになっている。</p>\n<blockquote>\n<p>型<code>T</code>が型<code>U</code>を<strong>支配する</strong>とは<code>T</code>と<code>U</code>が等しいか、<code>T</code>と<code>U</code>のトップレベルの型コンストラクタ(top-level type constructor)に等しい部分があり、<code>T</code>が<code>U</code>よりも複雑で、<code>T</code>と<code>U</code>のcovering setが等しいときのことをいう。</p>\n</blockquote>\n<p>用語がいくつか出てきたのでさらに解説すると、</p>\n<ul>\n<li>トップレベルの型コンストラクタとは簡単に言うと、型パラメタを除いたり、シングルトン型を本来の型に戻したりしたもののこと。<br>\n例えば<code>List[Int]</code>ならトップレベルの型コンストラクタは<code>List</code>だし<code>\"foo\"</code>なら<code>String</code>になる。</li>\n<li><code>T</code>が<code>U</code>よりも複雑であるとは、型の複雑性(整数値)がより大きいことをいう。<br>\n型の複雑性は簡単に言うと、エイリアスなどを全て展開した上で、型に現れるパッケージ以外の名前の数を重複混みで数えたものとして考えればいいと思う。ただしシングルトン型は<code>+ 1</code>する。<br>\n例えば<code>List[Int]</code>は<code>List, Int</code>なので複雑性は<code>2</code>、<code>List[(Int, String, Int)]</code>は<code>List, Tuple3, Int, String, Int</code>で複雑性は<code>5</code>、といった感じ。</li>\n<li>型のcovering setとは、型に現れるパッケージ以外の名前の集合でいいと思う。<br>\n例えば<code>List[(Int, Int)]</code>のcovering setは<code>List, Tuple2, Int</code>のような感じ。</li>\n</ul>\n<p>ここまで理解すると、昨日の<code>Tree</code>の<code>Eq</code>が導出できない理由が説明できる。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-comment\">// List:</span>\n<span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">List</span>[<span class=\"hljs-type\">A</span>]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Nil</span>[<span class=\"hljs-type\">A</span>]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cons</span>[<span class=\"hljs-type\">A</span>]</span>\n\n<span class=\"hljs-comment\">// Tree:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Tree</span>[<span class=\"hljs-type\">A</span>]</span>\n\n<span class=\"hljs-comment\">// HList:</span>\n<span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">HList</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HNil</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HList</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>:*:[<span class=\"hljs-type\">H</span>, <span class=\"hljs-type\">T</span> &#x3C;: <span class=\"hljs-type\">HList</span>] <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-type\">HList</span>\n\n<span class=\"hljs-comment\">// Coproduct:</span>\n<span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Coproduct</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CNil</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Coproduct</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>:+:[<span class=\"hljs-type\">H</span>, <span class=\"hljs-type\">T</span> &#x3C;: <span class=\"hljs-type\">Coproduct</span>] <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-type\">Coproduct</span>\n\n<span class=\"hljs-comment\">// Generic:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Generic</span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">R</span>]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Generic</span> </span>{\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">list</span></span>[<span class=\"hljs-type\">A</span>]: <span class=\"hljs-type\">Generic</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>], <span class=\"hljs-type\">Nil</span>[<span class=\"hljs-type\">A</span>] :+: <span class=\"hljs-type\">Cons</span>[<span class=\"hljs-type\">A</span>] :+: <span class=\"hljs-type\">CNil</span>] = ???\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">nil</span></span>[<span class=\"hljs-type\">A</span>]: <span class=\"hljs-type\">Generic</span>[<span class=\"hljs-type\">Nil</span>[<span class=\"hljs-type\">A</span>], <span class=\"hljs-type\">HNil</span>] = ???\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cons</span></span>[<span class=\"hljs-type\">A</span>]: <span class=\"hljs-type\">Generic</span>[<span class=\"hljs-type\">Cons</span>[<span class=\"hljs-type\">A</span>], <span class=\"hljs-type\">A</span> :*: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>] :*: <span class=\"hljs-type\">HNil</span>] = ???\n\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tree</span></span>[<span class=\"hljs-type\">A</span>]: <span class=\"hljs-type\">Generic</span>[<span class=\"hljs-type\">Tree</span>[<span class=\"hljs-type\">A</span>], <span class=\"hljs-type\">A</span> :*: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Tree</span>[<span class=\"hljs-type\">A</span>]] :*: <span class=\"hljs-type\">HNil</span>] = ???\n}\n\n<span class=\"hljs-comment\">// Eq:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Eq</span>[<span class=\"hljs-type\">A</span>]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Eq</span> </span>{\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">int</span></span>: <span class=\"hljs-type\">Eq</span>[<span class=\"hljs-type\">Int</span>] = ???\n\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">generic</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">R</span>](<span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-type\">AR</span>: <span class=\"hljs-type\">Generic</span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">R</span>], <span class=\"hljs-type\">R</span>: <span class=\"hljs-type\">GEq</span>[<span class=\"hljs-type\">R</span>]): <span class=\"hljs-type\">Eq</span>[<span class=\"hljs-type\">A</span>] = ???\n}\n\n<span class=\"hljs-comment\">// GEq:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">GEq</span>[<span class=\"hljs-type\">R</span>]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">GEq</span> </span>{\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-keyword\">val</span> hnil: <span class=\"hljs-type\">GEq</span>[<span class=\"hljs-type\">HNil</span>] = ???\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hcons</span></span>[<span class=\"hljs-type\">H</span>: <span class=\"hljs-type\">GEq</span>, <span class=\"hljs-type\">T</span> &#x3C;: <span class=\"hljs-type\">HList</span>: <span class=\"hljs-type\">GEq</span>]: <span class=\"hljs-type\">GEq</span>[<span class=\"hljs-type\">H</span> :*: <span class=\"hljs-type\">T</span>] = ???\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-keyword\">val</span> cnil: <span class=\"hljs-type\">GEq</span>[<span class=\"hljs-type\">CNil</span>] = ???\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ccons</span></span>[<span class=\"hljs-type\">H</span>: <span class=\"hljs-type\">GEq</span>, <span class=\"hljs-type\">T</span> &#x3C;: <span class=\"hljs-type\">Coproduct</span>: <span class=\"hljs-type\">GEq</span>]: <span class=\"hljs-type\">GEq</span>[<span class=\"hljs-type\">H</span> :+: <span class=\"hljs-type\">T</span>] = ???\n\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">value</span></span>[<span class=\"hljs-type\">A</span>](<span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-type\">A</span>: => <span class=\"hljs-type\">Eq</span>[<span class=\"hljs-type\">A</span>]): <span class=\"hljs-type\">GEq</span>[<span class=\"hljs-type\">A</span>] = ???\n}</code></pre>\n<p>ここで<code>implicitly[Eq[Tree[Int]]]</code>とすると、まず<code>Eq.generic</code>を候補として<code>GEq[Int :*: List[Tree[Int]] :*: HNil]</code>を探索しに行く。<br>\n探索が続くと最終的に、<code>GEq[Cons[Tree[Int]]]</code>の候補として<code>GEq.value</code>を見つけて、<code>Eq[Cons[Tree[Int]]]</code>を探索する。<br>\nこの候補は<code>Eq.generic</code>で<code>GEq[Tree[Int] :*: List[Tree[Int]] :*: HNil]</code>を見つける必要があるが、ここで最初の<code>GEq[Int :*: List[Tree[Int]] :*: HNil]</code>と複雑度、covering setを比較すると、</p>\n<ul>\n<li><code>GEq[Int :*: List[Tree[Int]] :*: HNil]</code>の複雑度<code>8</code>、covering set <code>GEq, :*:, HNil, List, Tree, Int</code></li>\n<li><code>GEq[Tree[Int] :*: List[Tree[Int]] :*: HNil]</code>の複雑度 <code>9</code>、 covering set <code>GEq, :*: HNil, List, Tree, Int</code></li>\n</ul>\n<p>なので、divergingと判定され探索が打ち切られ、候補が見つけられず全体の探索が失敗する。</p>\n<p>一応、ここまで理解していれば回避策を考えるのも簡単で、例えば<code>Tuple1</code>を追加して<code>Generic.tree</code>を修正すれば、</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-comment\">// Tuple1:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Tuple1</span>[<span class=\"hljs-type\">A</span>]</span>\n\n<span class=\"hljs-comment\">// Generic:</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Generic</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tree</span></span>[<span class=\"hljs-type\">A</span>]: <span class=\"hljs-type\">Generic</span>[<span class=\"hljs-type\">Tree</span>[<span class=\"hljs-type\">A</span>], <span class=\"hljs-type\">Tuple1</span>[<span class=\"hljs-type\">A</span>] :*: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Tree</span>[<span class=\"hljs-type\">A</span>]] :*: <span class=\"hljs-type\">HNil</span>]\n\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tuple1</span></span>[<span class=\"hljs-type\">A</span>]: <span class=\"hljs-type\">Generic</span>[<span class=\"hljs-type\">Tuple1</span>[<span class=\"hljs-type\">A</span>], <span class=\"hljs-type\">A</span> :*: <span class=\"hljs-type\">HNil</span>]\n}</code></pre>\n<p><code>implicitly[Eq[Tree[Int]]]</code>は動くようになる。<br>\nこれは<code>Tuple1</code>で囲ったことでcovering setが異なるものになったため。<br>\nしかし<code>Tuple1[List[Tree[A]]]</code>としてはいけない。<br>\nなぜなら、これだと<code>Eq[Tuple1[List[Tree[Int]]]]</code>を導出するときに探索する<code>GEq[List[Tree[Int]] :*: HNil]</code>が、<code>Eq[Cons[Tree[Int]]]</code>を導出するときに探索する<code>GEq[Tree[Int] :*: List[Tree[Int]] :*: HNil]</code>に支配されてしまい、divergingになってしまう。</p>\n<p>また次の定義を追加しても動作する。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">list</span></span>[<span class=\"hljs-type\">A</span>: <span class=\"hljs-type\">Eq</span>]: <span class=\"hljs-type\">Eq</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>]] = <span class=\"hljs-type\">Eq</span>.generic</code></pre>\n<p>この定義を追加することで<code>Eq[Cons[Tree[Int]]]</code>の探索が行なわれず、先に<code>Eq[Tree[Int]]</code>の探索が行なわれ、これは最初の型と等しく間に<code>GEq.value</code>によるby nameな値を含むため、正しく展開される。</p>\n<p>ちなみに<code>implicitly</code>の展開結果などは<code>reify</code>を使うと比較的簡単に確かめられる。<br>\n覚えておくと便利かもしれない。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">import</span> scala.reflect.runtime.universe.reify\n\nprintln(reify(implicitly[<span class=\"hljs-type\">Eq</span>[<span class=\"hljs-type\">Tree</span>[<span class=\"hljs-type\">Int</span>]]]))\n<span class=\"hljs-comment\">// Expr[Eq[Tree[Int]]](Predef.implicitly[Eq[Tree[Int]]]({</span>\n<span class=\"hljs-comment\">//   final class LazyDefns$1 {</span>\n<span class=\"hljs-comment\">//     final val rec$1 = Eq.generic(</span>\n<span class=\"hljs-comment\">//       Generic.tree,</span>\n<span class=\"hljs-comment\">//       GEq.hcons(</span>\n<span class=\"hljs-comment\">//         GEq.value(Eq.int),</span>\n<span class=\"hljs-comment\">//         GEq.hcons(</span>\n<span class=\"hljs-comment\">//           GEq.value(list(rec$1)),</span>\n<span class=\"hljs-comment\">//           GEq.hnil,</span>\n<span class=\"hljs-comment\">//         ),</span>\n<span class=\"hljs-comment\">//       ).</span>\n<span class=\"hljs-comment\">//     )</span>\n<span class=\"hljs-comment\">//   };</span>\n<span class=\"hljs-comment\">//   final val lazyDefns$1 = new LazyDefns$1();</span>\n<span class=\"hljs-comment\">//   lazyDefns$1.rec$1</span>\n<span class=\"hljs-comment\">// }))</span></code></pre>\n<p>上のは<code>list</code>を定義したときの展開結果だけど、<code>Tuple1</code>を使うと以下のようになる。<br>\nいかにも完全に展開しました、という雰囲気がある。</p>\n<pre><code class=\"hljs language-scala\">println(reify(implicitly[<span class=\"hljs-type\">Eq</span>[<span class=\"hljs-type\">Tree</span>[<span class=\"hljs-type\">Int</span>]]]))\n<span class=\"hljs-comment\">// Expr[Eq[Tree[Int]]](Predef.implicitly[Eq[Tree[Int]]]({</span>\n<span class=\"hljs-comment\">//   final class LazyDefns$1 {</span>\n<span class=\"hljs-comment\">//     final val rec$2 = GEq.hcons(</span>\n<span class=\"hljs-comment\">//       GEq.value(</span>\n<span class=\"hljs-comment\">//         Eq.generic(</span>\n<span class=\"hljs-comment\">//           Generic.list,</span>\n<span class=\"hljs-comment\">//           GEq.ccons(</span>\n<span class=\"hljs-comment\">//             GEq.value(Eq.generic(Generic.nil, GEq.hnil)),</span>\n<span class=\"hljs-comment\">//             GEq.ccons(</span>\n<span class=\"hljs-comment\">//               GEq.value(Eq.generic(Generic.cons, GEq.hcons(GEq.value(rec$1), rec$2))),</span>\n<span class=\"hljs-comment\">//               GEq.cnil,</span>\n<span class=\"hljs-comment\">//             ),</span>\n<span class=\"hljs-comment\">//           ),</span>\n<span class=\"hljs-comment\">//         ),</span>\n<span class=\"hljs-comment\">//       ),</span>\n<span class=\"hljs-comment\">//       GEq.hnil,</span>\n<span class=\"hljs-comment\">//     );</span>\n<span class=\"hljs-comment\">//     final val rec$1 = Eq.generic(</span>\n<span class=\"hljs-comment\">//       Generic.tree,</span>\n<span class=\"hljs-comment\">//       GEq.hcons(</span>\n<span class=\"hljs-comment\">//         GEq.value(Eq.generic(Generic.tuple1, GEq.hcons(GEq.value(Eq.int), GEq.hnil))),</span>\n<span class=\"hljs-comment\">//         rec$2,</span>\n<span class=\"hljs-comment\">//       ),</span>\n<span class=\"hljs-comment\">//     )</span>\n<span class=\"hljs-comment\">//   };</span>\n<span class=\"hljs-comment\">//   final &#x3C;synthetic> val lazyDefns$1 = new LazyDefns$1();</span>\n<span class=\"hljs-comment\">//   lazyDefns$1.rec$1</span>\n<span class=\"hljs-comment\">// }))</span></code></pre>\n<p>ただ、<code>Tuple1</code>を使う方法だと<code>Tree[List[Int]]</code>では展開が上手くいかないので<code>Eq.generic</code>を使って<code>Eq[List[A]]</code>を定義しておく方が無難な気がする。<br>\n(<code>Eq[Tuple[List[Int]]]</code>を導出するために探索する<code>GEq[List[Int] :*: HNil]</code>が、<code>Eq[Cons[Int]]</code>を導出するために探索する<code>GEq[Int :*: List[Int] :*: HNil]</code>に支配されてしまうため)</p>\n<p><code>implicit</code>への理解度は上がったが、この知識がどこで役に立つのかは全く分からない。<br>\nあとScastie便利。</p>","fields":{"date":"2019-09-19"},"frontmatter":{"title":"implicit完全に理解した"},"excerpt":"やったこと ミリシタ TC最初のイベントのはじまり。 ちょっとだけやる気があるのだけど、目下の悩みはSSA。 あと2日とか実感がねえ。 シャニ MVP取れた。 MVPのコミュ良かった。 https://twitter.com/make_now_just/status/11746…"},"prev":{"fields":{"date":"2019-09-20","slug":"/post/2019-09-20-diary/"},"frontmatter":{"title":"JDK13でScala無理なのでは"}},"next":{"fields":{"date":"2019-09-18","slug":"/post/2019-09-18-diary/"},"frontmatter":{"title":"daliをリリースした"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2019-09-19-diary/","prevSlug":"/post/2019-09-20-diary/","nextSlug":"/post/2019-09-18-diary/"}}}