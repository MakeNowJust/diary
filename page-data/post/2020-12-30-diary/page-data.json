{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/post/2020-12-30-diary/",
    "result": {"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>TimSort</h2>\n<p>TimSortの不幸はTimSortと名付けられたことだと思う。<br>\n絶妙に最適化された内容とTimという作者の名前が付いているせいで、アルゴリズムの本質が分かりづらくなっている。<br>\nというか、ある意味ではTimSortというのはオリジナルの実装しか存在しないのではないようにも思える。<br>\n実際、どこまでがプログラム的な最適化で、どこまでがアルゴリズム的な本質なのかを上手く説明できる人はいないんじゃないかな‥‥と。<br>\nここまで広まってしまったから、もはや作者のTim Petersでさえ本質を見極められなくなっている可能性は十分ある。</p>\n<p>‥‥ということを、昨日書いたTimSortとして深さを制限したマージソートを公開している例を見ながら考えていた。</p>\n<p>自分が思うTimSortの本質は、この辺り。</p>\n<ol>\n<li>昇順もしくは降順で最初から並んでいる部分をrunという名前で分割する</li>\n<li>runの長さが足りないときは、二分挿入ソートを使って範囲を伸ばす</li>\n<li>runをスタックで管理するが、上手くスタックの深さが<code>log n</code>に収まるようにマージしていく</li>\n<li>マージは短い側をコピーして長い側にマージしていくようにする</li>\n<li>マージの際に、値の移動が片側に一定回数以上集中したら、移動元の側でgallopサーチをして、値をまとめて移動する</li>\n</ol>\n<p>だけど、gallopサーチの部分の重要度はそこまで高くないかな(値にい偏りがある場合の最適化なので)、と思うので、Rustの実装はいい落としどころを付いている気がする。</p>\n<h2>Apex</h2>\n<p>なんか面白くなってきた。<br>\nやっていきたい(そんな時間はない)。</p>","fields":{"date":"2020-12-30"},"frontmatter":{"title":"TimSort完全に理解した(してない)"},"excerpt":"やったこと TimSort TimSortの不幸はTimSortと名付けられたことだと思う。 絶妙に最適化された内容とTimという作者の名前が付いているせいで、アルゴリズムの本質が分かりづらくなっている。 というか、ある意味ではTimSortというのはオリジナルの実装しか存在し…"},"prev":{"fields":{"date":"2020-12-31","slug":"/post/2020-12-31-diary/"},"frontmatter":{"title":"一年の終わり"}},"next":{"fields":{"date":"2020-12-29","slug":"/post/2020-12-29-diary/"},"frontmatter":{"title":"ゆくm@sくるm@sだった"}}},"pageContext":{"slug":"/post/2020-12-30-diary/","prevSlug":"/post/2020-12-31-diary/","nextSlug":"/post/2020-12-29-diary/"}},
    "staticQueryHashes": ["530032413"]}