{"componentChunkName":"component---src-templates-post-js","path":"/post/2022-05-18-diary/","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>Sather</h2>\n<p>Sather というプログラミング言語がある。<br>\n1990年代に UCB (カリフォルニア州バークレイ校) が開発していたプログラミング言語で、Eiffel 系の構文の言語なのだけど、当時としては先進的な機能 (GC、つよい型付け、多重継承、高階手続きなど) を持っているのが特徴。</p>\n<p>とくにイテレータの構文が特徴的で、まずいわゆる <code>while</code> ループは次のように書く。</p>\n<pre><code>i:INT := 0;\nloop\n  while!(i &#x3C; 10);\n  #OUT + i + \"\\n\";\n  i := i + 1\nend\n-- 0 から 9 まで出力\n</code></pre>\n<p>この <code>while!</code> は自由な位置に置くことができて、次のようもできる。</p>\n<pre><code>i:INT := 0;\nloop\n  #OUT + i + \"\\n\";\n  while!(i &#x3C; 10);\n  i := i + 1\nend\n-- 0 から 10 まで出力\n</code></pre>\n<p>要するに、<code>loop</code> 自体は普通の言語の <code>while (true)</code> みたいな感じで、<code>while!</code> の中の条件が偽になった瞬間にループを抜けるような挙動をする。<br>\nさらに、<code>while!</code> 以外にも <code>until!</code> などもあるのだが、それ以上にすごいのがこのようなイテレータを自前で定義することができることだろう。<br>\n例えば <code>INT</code> 型には <code>for!</code> や <code>downto!</code> といったイテレータが定義されていて <code>0.for!(10)</code> と <code>loop</code> の中に書くと <code>0</code> から <code>10</code> までループできたりする。<br>\nイテレータを自前で定義したときに、イテレータからループに値を送る構文が <code>yield</code> なのだけど、これも恐らく Ruby と同じく CLU 由来なのだろうと予測している (<a href=\"https://magazine.rubyist.net/articles/0009/0009-Legwork.html\">参考</a>)。</p>\n<p>このイテレータは現代の感覚で解釈するとエフェクトみたいな感じがして (実際この上にかなり高度なエフェクトシステムを構築できると思う)、面白いのだけどちょっと扱いづらい印象がある。</p>\n<p>というわけで Quine。279言語目。<br>\n無駄にイテレータを使っている (<code>elt!</code> と <code>ind!</code>)。あと <code>pretty</code> メソッドが便利。この時代の言語でこういった機能があるのはえらい。</p>\n<p><a href=\"https://github.com/makenowjust/quine/blob/f67711f081757207cb15c5ae23f9a1d1a86cdf3e/quine.sa\" class=\"embedly-card\">https://github.com/makenowjust/quine/blob/f67711f081757207cb15c5ae23f9a1d1a86cdf3e/quine.sa</a></p>\n<p>ビルドがちょっと面倒で、<code>libgc-dev</code> を入れたあとに <code>make</code> すると大体コンパイルが通るのだけど、そのあとの <code>System/Common/CONFIG</code> のビルドで (自動生成された?) C のコメントが認識できず失敗するので、適当に削除してやると上手くいく。</p>\n<p>Quine 自体のコンパイルはこんな感じ。<br>\nなんか警告がいっぱい出るけど気にしないこと。</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">Bin/sacomp quine.sa -o quine &#x26;&#x26; ./quine</span></code></pre>\n<p>久々の面白い言語だった。</p>\n<h2>ビルドファイターズ</h2>\n<p>最後まで見終わった。<br>\n面白かった。ホビーアニメに求められているものをすべてやったのではないかと思う。<br>\nいいアニメだ‥‥。</p>","fields":{"date":"2022-05-18"},"frontmatter":{"title":"Sather で Quine を書いた"},"excerpt":"やったこと Sather Sather というプログラミング言語がある。 1990年代に UCB (カリフォルニア州バークレイ校) が開発していたプログラミング言語で、Eiffel 系の構文の言語なのだけど、当時としては先進的な機能 (GC、つよい型付け、多重継承、高階手続きな…"},"prev":{"fields":{"date":"2022-05-19","slug":"/post/2022-05-19-diary/"},"frontmatter":{"title":"スマホが壊れかけている"}},"next":{"fields":{"date":"2022-05-17","slug":"/post/2022-05-17-diary/"},"frontmatter":{"title":"recheck v4.4.0 のリリース"}}},"pageContext":{"slug":"/post/2022-05-18-diary/","prevSlug":"/post/2022-05-19-diary/","nextSlug":"/post/2022-05-17-diary/"}},"staticQueryHashes":["530032413"]}