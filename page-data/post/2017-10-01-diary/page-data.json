{"componentChunkName":"component---src-templates-post-js","path":"/post/2017-10-01-diary/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"id":"a2e8fcbe-aa46-5c28-8573-3989ce9062c0","html":"<h1>やったこと</h1>\n<h2>マギレコ</h2>\n<p>杏子が出たので救われた。世界の全てを許した。</p>\n<h2>mioとかtokioとか</h2>\n<p>Rustの非同期/イベントIO周りが気になったので調べてみた。</p>\n<p>mioはイメージとしてはJavaのnio2の非同期IO APIみたいな感じ。<code>Poll</code>に監視対象を登録して、イベントが来たらそれを取り出して、と。これは分かりやすい。</p>\n<p>ただ、tokioの方はfuturesとすごく結合していてちょっとまだ分からない。futuresの方も理解しなきゃいけない気がする。というかfutures、名前に反してstreamとかの実装も含むからすごく複雑。</p>\n<h2>技術書典</h2>\n<p>がんばって本にします。</p>","fields":{"date":"2017-10-01"},"frontmatter":{"title":"10月になっていた"},"excerpt":"やったこと マギレコ 杏子が出たので救われた。世界の全てを許した。 mioとかtokioとか Rustの非同期/イベントIO周りが気になったので調べてみた。 mioはイメージとしてはJavaのnio2の非同期IO APIみたいな感じ。Pollに監視対象を登録して、イベントが来た…"},"prev":{"id":"33431d57-1908-5a2e-87a8-aa00e6bdcb2d","fields":{"date":"2017-10-02","slug":"/post/2017-10-02-diary/"},"frontmatter":{"title":"クビキリサイクル最終巻を受け取った"}},"next":{"id":"e2e268a5-b1e6-5bc2-b3cc-d364623a5307","fields":{"date":"2017-09-30","slug":"/post/2017-09-30-diary/"},"frontmatter":{"title":"渋谷餃子に行った"}}},"pageContext":{"slug":"/post/2017-10-01-diary/","prevSlug":"/post/2017-10-02-diary/","nextSlug":"/post/2017-09-30-diary/"}}}