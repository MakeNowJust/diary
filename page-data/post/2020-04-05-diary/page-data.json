{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/post/2020-04-05-diary/",
    "result": {"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>Cコンパイラ</h2>\n<p>式のパーサを作った。<br>\n一度もコンパイルできていないがきっと動くだろう、きっと。</p>\n<p>参考にしてるのがそうやってるから、パーズ時に型情報を(必要なら)付けてるけど、これはイマイチなのではないかという気がする。</p>\n<p>暗黙の型変換とかの規則が結構複雑なのを考えると、</p>\n<ol>\n<li>変数の参照は解決しつつ、ソースコードの構造になるべく厳格な形でパーズ。</li>\n<li>型情報を追加しつつ、より単純なASTに変換。</li>\n<li>コード生成。</li>\n</ol>\n<p>という3パスでやるのがしっくり来る気がする。</p>\n<p>このツイートに書いた通り、ローカル変数の参照はパーズと共に解決した方が自然になるのでそうした方が良いのが難しいところ。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1246510815261286400\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1246510815261286400</a></p>\n<p>あとメモリ管理。<br>\nどうせならちゃんとやりたいけど、どうするのがいいんだろうな‥‥。<br>\n<code>shared_ptr</code>が欲しい‥‥。</p>\n<p>調べたらこんなのがあるようだ。</p>\n<p><a href=\"https://github.com/Snaipe/libcsptr\" class=\"embedly-card\">https://github.com/Snaipe/libcsptr</a></p>\n<h2>Crystal</h2>\n<p><code>Enumerable#first</code>のPRで、ドキュメントを整理した。<br>\nあとテストを通るようにした。<br>\n本当に<code>IndexError</code>の代わりに<code>Enumerable::EmptyError</code>でいいのかなぁ、という感じもするけど、<code>IndexError</code>が別段良いわけでもないのでこれでいいと思う。思いたい。</p>\n<p>再帰的なデータに対して<code>==</code>と<code>hash</code>を動くようにするやつは説明が難しくて困る。<br>\nはたして伝わっているのだろうか。<br>\nもうちょいPRの説明欄の文章を拡充すべきか。</p>","fields":{"date":"2020-04-05"},"frontmatter":{"title":"Cコンパイラ作ってた"},"excerpt":"やったこと Cコンパイラ 式のパーサを作った。 一度もコンパイルできていないがきっと動くだろう、きっと。 参考にしてるのがそうやってるから、パーズ時に型情報を(必要なら)付けてるけど、これはイマイチなのではないかという気がする。 暗黙の型変換とかの規則が結構複雑なのを考えると、…"},"prev":{"fields":{"date":"2020-04-06","slug":"/post/2020-04-06-diary/"},"frontmatter":{"title":"プリコネ1話"}},"next":{"fields":{"date":"2020-04-04","slug":"/post/2020-04-04-diary/"},"frontmatter":{"title":"浅倉透をプロデュースした"}}},"pageContext":{"slug":"/post/2020-04-05-diary/","prevSlug":"/post/2020-04-06-diary/","nextSlug":"/post/2020-04-04-diary/"}},
    "staticQueryHashes": ["530032413"]}