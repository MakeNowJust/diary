{"componentChunkName":"component---src-templates-post-js","path":"/post/2018-11-01-diary/","webpackCompilationHash":"e34376ac106bfbaa2881","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>衝突判定</h2>\n<p>衝突してる。</p>\n<p>実装が無駄に多くてしんどい。なぜなのか‥‥。</p>\n<h2>Welcome to the Black Parade</h2>\n<p><a href=\"https://www.youtube.com/watch?v=RRKJiM9Njr8\" class=\"embedly-card\">https://www.youtube.com/watch?v=RRKJiM9Njr8</a></p>\n<p>聴きながら「ここが最高の盛り上がりだろう」と思うと、その次のパートでその予想を覆して更に盛り上げてきて、それが最後まで続く。最後まで聴いて良かったというより、最初から最後まで良かったと思える曲は稀有だと思う。</p>\n<h2>リバーズ・エッジを読んだ</h2>\n<p>平坦な戦場で僕らが生き延びること。どうもこの歌詞はウィリアム・ギブソンの曲の歌詞らしい。</p>\n<p>最後まで読んだ。山田君が二人を河原に呼んでからの終盤の展開で引き込まれて最後まで読んでしまったというのが正しい。すごかった。</p>\n<p>難しい話ではないんだと思う。ストーリーは当時の作者の思うがままに作られていて、その上で表現されているのだろうな、と感じた。阪神淡路大震災よりも、オウムの地下鉄サリン事件よりも前に描かれた、ある種記念碑的な作品、なのだろう。彼(彼女)達の青春には東北に津波が来たことも無いしトランプが政権を取ったことも無くて、バブルが崩壊してからの空白のような時代に描かれた、ということに意義があるのだと思う。</p>\n<p>分からんけど。</p>\n<h2>11月になっていた</h2>\n<p>そういうこともある。</p>\n<h1>思うところ</h1>\n<h2>スタリラ</h2>\n<p>一日の回復回数とか制限多すぎると思う。もっと課金者に優しくすればいい。</p>\n<p>というか、対人戦のバランス調整をゲーム内でやる自信が無いからそういう設計になってるんだろうな、というのが見え見えで何だかなぁ、という感じ。</p>\n<h2><code>NamedTuple</code></h2>\n<p>何が正しい仕様なのかよく分からない。滅びればいいのに。</p>\n<pre><code class=\"hljs language-crystal\"><span class=\"hljs-comment\"># (1).</span>\n<span class=\"hljs-comment\"># 上はキャストに失敗して、下は成功すべきじゃない？</span>\n{<span class=\"hljs-symbol\">foo:</span> <span class=\"hljs-literal\">true</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>}.<span class=\"hljs-keyword\">as</span>?({<span class=\"hljs-symbol\">foo:</span> Int32})   <span class=\"hljs-comment\"># => nil</span>\n{<span class=\"hljs-symbol\">foo:</span> <span class=\"hljs-literal\">true</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>}.<span class=\"hljs-keyword\">as</span>?({<span class=\"hljs-symbol\">foo:</span> Float64}) <span class=\"hljs-comment\"># => nil</span>\n\n<span class=\"hljs-comment\"># (2).</span>\n<span class=\"hljs-comment\"># どうして下の定義しか呼ばれないんだろう‥‥。</span>\n<span class=\"hljs-comment\"># (1)が正しいとすると、コンパイルエラーになるほうが正しいような気がする。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span></span>(x : {<span class=\"hljs-symbol\">foo:</span> Int32})\n  :Int32\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span></span>(x : {<span class=\"hljs-symbol\">foo:</span> Float64})\n  :Float64\n<span class=\"hljs-keyword\">end</span>\n\nfoo({<span class=\"hljs-symbol\">foo:</span> <span class=\"hljs-literal\">true</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>})  <span class=\"hljs-comment\"># => :Float64</span>\nfoo({<span class=\"hljs-symbol\">foo:</span> <span class=\"hljs-literal\">false</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>}) <span class=\"hljs-comment\"># => :Float64</span></code></pre>\n<p>(1)は<code>Tuple</code>でもこうなので正しいのかもしれない。</p>\n<pre><code class=\"hljs language-crystal\">{<span class=\"hljs-literal\">true</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>}.<span class=\"hljs-keyword\">as</span>?({Int32})   <span class=\"hljs-comment\"># => nil</span>\n{<span class=\"hljs-literal\">true</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>}.<span class=\"hljs-keyword\">as</span>?({Float64}) <span class=\"hljs-comment\"># => nil</span></code></pre>\n<p>反対に、(2)は<code>Tuple</code>だとコンパイルエラーになる。</p>\n<pre><code class=\"hljs language-crystal\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bar</span></span>(x : {Int32})\n  :Int32\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bar</span></span>(x : {Float64})\n  :Float64\n<span class=\"hljs-keyword\">end</span>\n\nbar({<span class=\"hljs-literal\">true</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>})\nbar({<span class=\"hljs-literal\">false</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2.34</span>})\n\n<span class=\"hljs-comment\"># Error in bar.cr:10: no overload matches 'bar' with type Tuple(Float64 | Int32)</span>\n<span class=\"hljs-comment\"># Overloads are:</span>\n<span class=\"hljs-comment\">#  - bar(x : ::Tuple(Int32))</span>\n<span class=\"hljs-comment\">#  - bar(x : ::Tuple(Float64))</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># p bar({true ? 1 : 2.34})</span>\n<span class=\"hljs-comment\">#   ^~~</span></code></pre>\n<p>(2)がコンパイルエラーになるように直したいところ。</p>\n<h2>スプラット引数の前に引数のあるメソッドで、スプラット型制約を置くと<code>IndexError</code>になるやつ</h2>\n<p><a href=\"https://github.com/crystal-lang/crystal/pull/6648#issuecomment-434648696\" class=\"embedly-card\">https://github.com/crystal-lang/crystal/pull/6648#issuecomment-434648696</a></p>\n<p>RX14がさらっと報告してるけど、これを直すのかなり大変だと思う。<br>\n表面上動くようにするパッチは書けたんだけど、正しいか全く自信がないし、そもそも何が正しい挙動なのか全く分からない。<br>\nCrystalしんどいね。</p>","fields":{"date":"2018-11-01"},"frontmatter":{"title":"リバーズ・エッジを読んだ"},"excerpt":"やったこと 衝突判定 衝突してる。 実装が無駄に多くてしんどい。なぜなのか‥‥。 Welcome to the Black Parade https://www.youtube.com/watch?v=RRKJiM9Njr8 聴きながら「ここが最高の盛り上がりだろう」と思うと、…"},"prev":{"fields":{"date":"2018-11-02","slug":"/post/2018-11-02-diary/"},"frontmatter":{"title":"crystal.tokyo #8だった"}},"next":{"fields":{"date":"2018-10-31","slug":"/post/2018-10-31-diary/"},"frontmatter":{"title":"衝突判定"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2018-11-01-diary/","prevSlug":"/post/2018-11-02-diary/","nextSlug":"/post/2018-10-31-diary/"}}}