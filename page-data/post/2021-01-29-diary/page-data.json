{"componentChunkName":"component---src-templates-post-js","path":"/post/2021-01-29-diary/","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>minicheck</h2>\n<p>何というかダメだーという気持ちになっている。\nそもそも今のやり方だと <span class=\"math math-inline\">(A \\to B) \\to C</span> 型の関数として <span class=\"math math-inline\">A \\times C^B</span> 種類の値しか生成されないから、どうしても生成できない関数があるのが問題だということにもっと早く気付きたかった。\n<span class=\"math math-inline\">C^{B^A}</span> 種類あるのは明らかなんだからどうにかしなきゃいけないと思われる‥‥がどうしようもない気もする。</p>\n<p>例えば、<code>(Boolean => Boolean) => Boolean</code> の関数に対して、現在の方法だと次の6種類しか生成されないけど、この型の関数は全部で16通りあるはず。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"><code>id</code></th>\n<th align=\"center\"><code>not</code></th>\n<th align=\"center\"><code>const(true)</code></th>\n<th align=\"center\"><code>const(false)</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>(true, id)</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>false</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>(false, id)</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>false</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>(true, not)</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>(false, not)</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>(true, const(true))</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>(false, const(true))</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>true</code></td>\n<td align=\"center\"><code>true</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>(true, const(false))</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>false</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>(false, const(false))</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>false</code></td>\n<td align=\"center\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p>よって、<code>f(id) &#x26;&#x26; f(not) &#x26;&#x26; f(const(true)) &#x26;&#x26; !f(const(false))</code> が <code>true</code> になるような関数とかが生成できなかったりする。</p>\n<p>知能が足りない。</p>\n<p>一応、<code>:=></code> の <code>table</code> メソッドを使って、いくつかの値を乱数生成器に反映させるようにすればこういうのにもある程度は対処できそうだけど、本質的な解決にはなっていない気がする。\nというかそれでどうやって縮小するんだ？　できるか？</p>\n<p>とはいえこの問題を解決できたらかっこいい。\nがんばっていきたい。</p>","fields":{"date":"2021-01-29"},"frontmatter":{"title":"minicheckダメじゃん"},"excerpt":"やったこと minicheck 何というかダメだーという気持ちになっている。\nそもそも今のやり方だと  型の関数として  種類の値しか生成されないから、どうしても生成できない関数があるのが問題だということにもっと早く気付きたかった。\n 種類あるのは明らかなんだからどうにかしなき…"},"prev":{"fields":{"date":"2021-01-30","slug":"/post/2021-01-30-diary/"},"frontmatter":{"title":"Weekly Crystal-JPをやった"}},"next":{"fields":{"date":"2021-01-28","slug":"/post/2021-01-28-diary/"},"frontmatter":{"title":"雪だった"}}},"pageContext":{"slug":"/post/2021-01-29-diary/","prevSlug":"/post/2021-01-30-diary/","nextSlug":"/post/2021-01-28-diary/"}},"staticQueryHashes":["530032413"]}