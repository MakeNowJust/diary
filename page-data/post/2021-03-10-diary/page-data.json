{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/post/2021-03-10-diary/",
    "result": {"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>DFA</h2>\n<p>DFA の最小化のアルゴリズムの際に partition refinement というデータ構造を使う。<br>\nこれは <code>n</code> 個の要素の集合の細分の計算が、細分をする集合の大きさでできるもの。<br>\nつまり、<code>{1, 2, 3 | 4, 5}</code> に対して <code>{2, 3, 4}</code> で細分して <code>{1 | 2, 3 | 4 | 5}</code> を求めるのを <code>|{2, 3, 4}| = 3</code> の計算量でできる。</p>\n<p>この実装には双方向連結リストを使う場合と、可変な <code>Set</code> を使う場合があるのだけど、本質的にはその要素がどの部分に属しているのかを保持しておくことで実現される。</p>\n<p>というかこれ日本語の情報ないが。</p>","fields":{"date":"2021-03-10"},"frontmatter":{"title":"DFA の最小化なんも分からん"},"excerpt":"やったこと DFA DFA の最小化のアルゴリズムの際に partition refinement というデータ構造を使う。 これは n 個の要素の集合の細分の計算が、細分をする集合の大きさでできるもの。 つまり、{1, 2, 3 | 4, 5} に対して {2, 3, 4} …"},"prev":{"fields":{"date":"2021-03-11","slug":"/post/2021-03-11-diary/"},"frontmatter":{"title":"Switch版APEX"}},"next":{"fields":{"date":"2021-03-09","slug":"/post/2021-03-09-diary/"},"frontmatter":{"title":"diary が壊れつつあり"}}},"pageContext":{"slug":"/post/2021-03-10-diary/","prevSlug":"/post/2021-03-11-diary/","nextSlug":"/post/2021-03-09-diary/"}},
    "staticQueryHashes": ["530032413"]}