{"componentChunkName":"component---src-templates-post-js","path":"/post/2017-03-25-quine-flate/","webpackCompilationHash":"bd5ea04e74af39142c59","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<script async src=\"//cdn.embedly.com/widgets/platform.js\"></script>\n<h1>やったこと</h1>\n<h2>DafnyでQuineを書いた</h2>\n<p>DafnyというMicrosoftが作っている正当性の検証のできるプログラミング言語があるらしい。</p>\n<p><a class=\"embedly-card\" href=\"https://www.microsoft.com/en-us/research/project/dafny-a-language-and-program-verifier-for-functional-correctness/\">Dafny: A Language and Program Verifier for Functional Correctness - Microsoft Research</a></p>\n<p>バックエンドにBoogieとz3を使って検証するらしい。形式手法というのだろうか？　ともかくz3がつよいということが分かる言語だった。</p>\n<p>多分、C#とかに比較的近い構文で形式手法ができることに価値があるのではないかと思う。</p>\n<p>Quineはこれ。</p>\n<p><a class=\"embedly-card\" href=\"https://github.com/MakeNowJust/quine/blob/55ac3a8393bf1d41225d7018b4cb817a381b99ed/quine.dfy\">quine/quine.dfy at 55ac3a8393bf1d41225d7018b4cb817a381b99ed · MakeNowJust/quine</a></p>\n<p>せっかくなので<code>Quote</code>メソッドで返される文字列が引数の文字列の長さの二倍より二大きくなっているか検証している。Quineかどうかの検証というのは中々難しい。というかできるんだろうか‥‥。</p>\n<p>実行方法は、</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> dafny quine.dfy</span>\nDafny program verifier version 1.9.7.30401, Copyright (c) 2003-2016, Microsoft.\n\nDafny program verifier finished with 4 verified, 0 errors\nCompiled assembly into quine.exe\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> mono quine.exe | diff quine.dfy -</span></code></pre>\n<p>みたいな感じでいいと思います。ちなみに改行の大きさを1に仮定してるのでrise4funのオンラインで実行できるやつだと上手く動きません。</p>\n<p>これの地味にしんどかったところは、文字列の長さが<code>100</code>より大きくなることを要求すると問答無用で検証に失敗するところ。要するに<code>requires |s| > 100</code>みたいなのがあるとダメ。なので文字列の長さから引いた位置から部分文字列を取り出すようにしてる。これだと上手くいく。完全に謎。</p>\n<h2>JamでQuineを書いた</h2>\n<p>これは一週間前のことなんだけど実行方法をメモっておかないと忘れそうなので。</p>\n<p>Jamというビルドシステムがある。Boostのビルドで使われるのでこれで有名かもしれない。</p>\n<p>このビルドの定義用の言語でQuineを書いた。</p>\n<p><a class=\"embedly-card\" href=\"https://github.com/MakeNowJust/quine/blob/88becc31080ade377a0c9416b5e4c040af9394cd/quine.jam\">quine/quine.jam at 88becc31080ade377a0c9416b5e4c040af9394cd · MakeNowJust/quine</a></p>\n<p>で、これはJamでこう実行できる。</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> jam -d0 -f quine.jam | diff quine.jam -</span></code></pre>\n<p>ちなみに、これはBoost.Jamだと上手く動かない。というのもオリジナルのJamだと出力の末尾にスペースが入るのだけど、Boost.Jamだとそれがないから。なのでファイルの最後のスペースを消せばQuineになるはず。どう考えてもオリジナルのJamが悪いのだけど、されどオリジナルなので許容することにした。Boost.Jamも方言扱いして別のQuine書こうかとも思ったのだけど、これ以外に何が違うのかよく分かっていないので手を付けていない。</p>\n<h2>Flateを直した</h2>\n<p><a class=\"embedly-card\" href=\"https://github.com/crystal-lang/crystal/pull/4193\">Flate: try to inflate even if @stream.avail_in is 0 by MakeNowJust · Pull Request #4193 · crystal-lang/crystal</a></p>\n<p>なんかがんばったら直った。zlibよく分からないしちゃんと理解したい。</p>","fields":{"date":"2017-03-25"},"frontmatter":{"title":"Quineを書いたりFlateを直したりした"},"excerpt":"やったこと DafnyでQuineを書いた DafnyというMicrosoftが作っている正当性の検証のできるプログラミング言語があるらしい。 Dafny: A Language and Program Verifier for Functional Correctness -…"},"prev":{"fields":{"date":"2017-03-26","slug":"/post/2017-03-26-slide-kemono/"},"frontmatter":{"title":"スライドを作ったりけものフレンズを観たりしていた"}},"next":{"fields":{"date":"2017-03-24","slug":"/post/2017-03-24-pizza/"},"frontmatter":{"title":"てらちー氏にピザを奢ってもらった"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2017-03-25-quine-flate/","prevSlug":"/post/2017-03-26-slide-kemono/","nextSlug":"/post/2017-03-24-pizza/"}}}