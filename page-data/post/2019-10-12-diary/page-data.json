{"componentChunkName":"component---src-templates-post-js","path":"/post/2019-10-12-diary/","webpackCompilationHash":"bf2141475a440c019f88","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>Scala</h2>\n<p><code>neko-rec</code>を公開した。<br>\nコミット分けるの面倒だったので<code>Graph</code>の修正とかいくつかインスタンス増やしたのとかもまとめて1コミットになっている。おい。</p>\n<p>以下のような<code>ListF</code>を定義して<code>Mu</code>とか<code>Nu</code>を使ってみて色々考えたこと。<br>\n(ソースコードは<a href=\"https://github.com/MakeNowJust-Labo/scala-labo/blob/06d8995abd6eda9a307cf7980e9a1aec1c9b65cb/src/main/scala/codes/quine/labo/ListF.scala\">この辺</a>)</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ListF</span>[<span class=\"hljs-type\">T</span>, <span class=\"hljs-type\">A</span>]</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NilF</span>[<span class=\"hljs-type\">T</span>, <span class=\"hljs-type\">A</span>](<span class=\"hljs-params\"></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ListF</span>[<span class=\"hljs-type\">T</span>, <span class=\"hljs-type\">A</span>]</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsF</span>[<span class=\"hljs-type\">T</span>, <span class=\"hljs-type\">A</span>](<span class=\"hljs-params\">head: <span class=\"hljs-type\">T</span>, tail: <span class=\"hljs-type\">A</span></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ListF</span>[<span class=\"hljs-type\">T</span>, <span class=\"hljs-type\">A</span>]</span></code></pre>\n<p><code>cata</code>が第1引数に値を第2引数にF-代数(畳み込み関数)を取って畳み込んだ結果を返す形になってるけど、recursion schemeの観点からするとF-代数を受け取ってそれを使って畳み込む関数を返す方がいいのかもしれない。<br>\nが、それだとScala的には使いづらいのが難しいところ。</p>\n<p>あと<code>Nu</code>で<code>LazyList</code>的なものを実装しようと思たっら<code>head</code>と<code>tail</code>を<code>Eval</code>で囲む必要がある。<br>\nこれはまあ<code>LazyList[A]</code>が実質<code>List[Eval[A]]</code>なので仕方がないが理解するまで難しい。<br>\nそして<code>Eval</code>を上手くやらないと<code>StackOverflow</code>するので困る。しんどい‥‥。</p>\n<p>ScalaでRecursion Schemeやるのが間違いってことですね。</p>\n<h2>CrystalにPRを出した</h2>\n<p><a href=\"https://github.com/crystal-lang/crystal/pull/8315\" class=\"embedly-card\">https://github.com/crystal-lang/crystal/pull/8315</a></p>\n<p>フォーマッタのバグ修正。自分しか直せなさそうだったので。<br>\nこういうファイルが、</p>\n<pre><code class=\"hljs language-crystal\">foo\n  .foo(\n    foo.bar\n      .baz\n  )</code></pre>\n<p>こうフォーマットされてしまっていたので直した。</p>\n<pre><code class=\"hljs language-crystal\">foo\n  .foo(\n    foo.bar\n  .baz\n  )</code></pre>\n<p>結論としては引数内のインデントが正しく設定されてなかったので、その辺を一通り修正した。<br>\nなぜか多くの場合で上手く動いていた。不思議。</p>\n<p>この辺りを過去に修正した当時の自分は何を考えていたのか。</p>\n<h2>シャニ</h2>\n<p>凛世。<br>\n絵が良い。凛世のビジュアル大好きなんだな、と思った。<br>\nオデマスViとSPを入れていたのでSPが余ったのが印象的。<br>\nオデマスは大事。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1182928221571911680\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1182928221571911680</a></p>\n<h2>マジックアワーを観た</h2>\n<p>2008年の三谷幸喜の映画。Prime Videoで観た。<br>\nめっちゃ面白かった。コメディっていいなぁ、と思う。</p>\n<p>時期的に順序が逆なんだけど、カメラを止めるなと同じタイプの作品だな、とも感じた。<br>\nみんなこういう話が好きなんや。</p>","fields":{"date":"2019-10-12"},"frontmatter":{"title":"マジックアワーを観た"},"excerpt":"やったこと Scala neko-recを公開した。 コミット分けるの面倒だったのでGraphの修正とかいくつかインスタンス増やしたのとかもまとめて1コミットになっている。おい。 以下のようなListFを定義してMuとかNuを使ってみて色々考えたこと。 (ソースコードはこの辺)…"},"prev":{"fields":{"date":"2019-10-13","slug":"/post/2019-10-13-diary/"},"frontmatter":{"title":"ステキな金縛りを観た"}},"next":{"fields":{"date":"2019-10-11","slug":"/post/2019-10-11-diary/"},"frontmatter":{"title":"ジョーカーを観た"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2019-10-12-diary/","prevSlug":"/post/2019-10-13-diary/","nextSlug":"/post/2019-10-11-diary/"}}}