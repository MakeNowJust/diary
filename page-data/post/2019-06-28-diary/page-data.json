{"componentChunkName":"component---src-templates-post-js","path":"/post/2019-06-28-diary/","webpackCompilationHash":"1b7b7d2d6ef4de3259ec","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>マギレコ</h2>\n<p>気の迷いで10連を回してしまった。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1144254417132281857\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1144254417132281857</a></p>\n<p><a href=\"https://twitter.com/make_now_just/status/1144254512212914176\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1144254512212914176</a></p>\n<p>なんでやろなぁ‥‥。負の物欲センサーヤバい。</p>\n<h2>ミリシタ</h2>\n<p>3枚引き2枚抜き。<br>\n琴葉以外引いてしまった‥‥。</p>\n<p>こいつはヤベえ。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1144262272958849024\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1144262272958849024</a></p>\n<h2>ScalaMatsuri</h2>\n<p>英語の発表が多い。</p>\n<h3>Scala 3って、私にはどんな影響があるの?</h3>\n<p>NetflixはScalaの企業らしい。</p>\n<p>Scala 3の変更で良くなるところ:</p>\n<ol>\n<li><code>enum</code>構文の追加 (Javaとの互換性もある)</li>\n<li>和型の追加(例外を投げるのではなく和型として貸したり)</li>\n<li><code>null</code>が独立の型(<code>Null</code>型になる。和型と組み合わせて使う)</li>\n<li><code>opaque type</code>の追加(<code>AnyVal</code>を継承するような感じ)</li>\n<li>extension function(<code>implicit class</code>が楽に書ける)</li>\n<li><code>delegate</code>と<code>given</code>(<code>implicit</code> parameterを明示的に渡すのと通常の関数の呼び出しが被るのを回避できる?)</li>\n<li><code>==</code>の型チェックの強化</li>\n<li><code>trait</code>が<code>implicit</code> パラメータなどを取れるようになった。(普通に引数を取れるようになった)</li>\n<li>タプルの暗黙のデコンストラクト(<code>case</code>を書かなくてよくなった。便利)</li>\n<li>TASTy(JVMビットコード以前の中間表現)を使ったクロスコンパイル。</li>\n</ol>\n<p>全体的に良さそう。ただ、小耳に挟んだ話だとScala 3が出るのにあと5年はかかるとか‥‥。厳しい。</p>\n<h3>再帰:スキーム,代数,finally tagless,データ型. 統合されたビジョン</h3>\n<p>isomorphism: <code>to: A -> B</code>, <code>from: B -> A</code>の組。<code>from(to(a)) = a</code> かつ <code>to(from(b)) = b</code>を満たす。<br>\nScalaの型システムだと制約は表せない‥‥。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iso</span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>] </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to</span></span>(a: <span class=\"hljs-type\">A</span>): <span class=\"hljs-type\">B</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">from</span></span>(b: <span class=\"hljs-type\">B</span>): <span class=\"hljs-type\">A</span>\n}</code></pre>\n<p>Leibnizの引用: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">∀</mi><mi>P</mi><mi mathvariant=\"normal\">.</mi><mi>P</mi><mi>x</mi><mo>=</mo><mi>P</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x = y \\iff \\forall P. P x = P y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7194400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n<p><code>Iso[A, B]</code>: <code>A</code>と<code>B</code>の個数が同じ。<br>\n個数の数え方:</p>\n<ul>\n<li><code>Either[A, B]</code>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a + b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></li>\n<li><code>(A, B)</code>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a * b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></li>\n<li><code>A => B</code>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mi>a</mi></msup></mrow><annotation encoding=\"application/x-tex\">b^a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span></span></span></span></span></span></span></span></li>\n<li><code>Nothing</code>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li><code>Unit</code>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li><code>Boolean</code>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></li>\n</ul>\n<p>Type Algebraという。</p>\n<p>次の型の<code>foldr</code>を考える。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Expr</span></span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Lit</span>(<span class=\"hljs-params\">value: <span class=\"hljs-type\">Int</span></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Expr</span></span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\">l: <span class=\"hljs-type\">Expr</span>, r: <span class=\"hljs-type\">Expr</span></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Expr</span></span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mul</span>(<span class=\"hljs-params\">l: <span class=\"hljs-type\">Expr</span>, r: <span class=\"hljs-type\">Expr</span></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Expr</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foldr</span></span>[<span class=\"hljs-type\">Z</span>](<span class=\"hljs-keyword\">this</span>: <span class=\"hljs-type\">Expr</span>)(lit: <span class=\"hljs-type\">Int</span> => <span class=\"hljs-type\">Z</span>)(add: (<span class=\"hljs-type\">Z</span>, <span class=\"hljs-type\">Z</span>) => <span class=\"hljs-type\">Z</span>)(mul: (<span class=\"hljs-type\">Z</span>, <span class=\"hljs-type\">Z</span>) => <span class=\"hljs-type\">Z</span>): <span class=\"hljs-type\">Z</span> =\n  <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">match</span> {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Lit</span>(v)    => lit(v)\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Add</span>(l, r) => add(foldr(l)(lit)(add)(mul), foldr(r)(lit)(add)(mul))\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Mul</span>(l, r) => mul(foldr(l)(lit)(add)(mul), foldr(r)(lit)(add)(mul))\n  }</code></pre>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">r</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{foldr}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">f</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">d</span><span class=\"mord mathrm\">r</span></span></span></span></span>の型に注目:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">r</mi></mrow><mo>:</mo><mi mathvariant=\"normal\">∀</mi><mi>z</mi><mi mathvariant=\"normal\">.</mi><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">x</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">r</mi></mrow><mo>→</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">I</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>→</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{foldr} : \\forall z. \\mathrm{Expr} \\to (\\mathrm{Int} \\to z) \\to ((z, z) \\to z) \\to ((z, z) \\to z) \\to z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">f</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">d</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathrm\">E</span><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">I</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">r</mi></mrow><mo>:</mo><mi mathvariant=\"normal\">∀</mi><mi>z</mi><mi mathvariant=\"normal\">.</mi><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">x</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">r</mi></mrow><mo>→</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">I</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>→</mo><mi>z</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{foldr} : \\forall z. \\mathrm{Expr} \\to (\\mathrm{Int} \\to z, (z, z) \\to z, (z, z) \\to z) \\to z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">f</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">d</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathrm\">E</span><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">I</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">f</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">r</mi></mrow><mo>:</mo><mi mathvariant=\"normal\">∀</mi><mi>z</mi><mi mathvariant=\"normal\">.</mi><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">x</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">r</mi></mrow><mo>→</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">I</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>+</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{foldr} : \\forall z. \\mathrm{Expr} \\to (\\mathrm{Int} + (z, z) + (z, z) \\to z) \\to z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">f</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">d</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathrm\">E</span><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">r</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">I</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">I</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>+</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Int} + (z, z) + (z, z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">I</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>の部分に<code>Expr</code>の構造が反映されている。<br>\nこの部分を<code>ExprF[Z]</code>と置く。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ExprF</span>[+<span class=\"hljs-type\">Z</span>]</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LitF</span>[<span class=\"hljs-type\">Z</span>](<span class=\"hljs-params\">v: <span class=\"hljs-type\">Int</span></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ExprF</span>[<span class=\"hljs-type\">Nothing</span>]</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Add</span>[<span class=\"hljs-type\">Z</span>](<span class=\"hljs-params\">l: <span class=\"hljs-type\">Z</span>, r: <span class=\"hljs-type\">Z</span></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ExprF</span>[<span class=\"hljs-type\">Z</span>]</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mul</span>[<span class=\"hljs-type\">Z</span>](<span class=\"hljs-params\">l: <span class=\"hljs-type\">Z</span>, r: <span class=\"hljs-type\">Z</span></span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ExprF</span>[<span class=\"hljs-type\">Z</span>]</span></code></pre>\n<p>このとき<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">I</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>+</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Int} + (z, z) + (z, z) \\to z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">I</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span>の部分をF-Algebraという。<br>\n一般化して型にすると<code>type Algebra[F[_], C] = F[C] => C</code>。</p>\n<p>つまり、<code>foldr</code>の<code>Algebra[ExprF, ?]</code>を受け取るバージョンは次のように書ける。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foldAlg</span></span>[<span class=\"hljs-type\">Z</span>](<span class=\"hljs-keyword\">this</span>: <span class=\"hljs-type\">Expr</span>)(alg: <span class=\"hljs-type\">Algebra</span>[<span class=\"hljs-type\">ExprF</span>, <span class=\"hljs-type\">Z</span>]): <span class=\"hljs-type\">Z</span> = <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">match</span> {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Lit</span>(v)    => alg(<span class=\"hljs-type\">LitF</span>(v))\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Add</span>(l, r) => alg(<span class=\"hljs-type\">AddF</span>(foldAlg(l)(alg), foldAlg(r)(alg)))\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Mul</span>(l, r) => alg(<span class=\"hljs-type\">MulF</span>(foldAlg(l)(alg), foldAlg(r)(alg)))\n}</code></pre>\n<p>なお<code>Iso[Expr, ExprF[Expr]]</code>。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">embed</span></span>(<span class=\"hljs-keyword\">this</span>: <span class=\"hljs-type\">Expr</span>): <span class=\"hljs-type\">ExprF</span>[<span class=\"hljs-type\">Expr</span>] = <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">match</span> {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Lit</span>(v)    => <span class=\"hljs-type\">LitF</span>(v)\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Add</span>(l, r) => <span class=\"hljs-type\">AddF</span>(l, r)\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Mul</span>(l, r) => <span class=\"hljs-type\">MulF</span>(l, r)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">project</span></span>(<span class=\"hljs-keyword\">this</span>: <span class=\"hljs-type\">ExprF</span>[<span class=\"hljs-type\">Expr</span>]): <span class=\"hljs-type\">Expr</span> = <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">match</span> {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">LitF</span>(v)    => <span class=\"hljs-type\">Lit</span>(v)\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">AddF</span>(l, r) => <span class=\"hljs-type\">Add</span>(l, r)\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">MulF</span>(l, r) => <span class=\"hljs-type\">Mul</span>(l, r)\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">ExprIso</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Iso</span>[<span class=\"hljs-type\">Expr</span>, <span class=\"hljs-type\">ExprF</span>[<span class=\"hljs-type\">Expr</span>]] </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to</span></span>(a: <span class=\"hljs-type\">Expr</span>): <span class=\"hljs-type\">ExprF</span>[<span class=\"hljs-type\">Expr</span>]   = embed(a)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">from</span></span>(b: <span class=\"hljs-type\">ExprF</span>[<span class=\"hljs-type\">Expr</span>]): <span class=\"hljs-type\">Expr</span> = project(b)\n}</code></pre>\n<p>少し戻って、今度は<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">I</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>→</mo><mi>z</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathrm{Int} \\to z, (z, z) \\to z, (z, z) \\to z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">I</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>の部分に注目する。<br>\nこちらにも<code>Expr</code>の構造が反映されている。<br>\nこれをRecursion Schemeという。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">ExprA</span>[<span class=\"hljs-type\">Z</span>] </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lit</span></span>(v: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Z</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span></span>(l: <span class=\"hljs-type\">Z</span>, r: <span class=\"hljs-type\">Z</span>): <span class=\"hljs-type\">Z</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mul</span></span>(l: <span class=\"hljs-type\">Z</span>, r: <span class=\"hljs-type\">Z</span>): <span class=\"hljs-type\">Z</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foldRC</span></span>[<span class=\"hljs-type\">Z</span>](<span class=\"hljs-keyword\">this</span>: <span class=\"hljs-type\">Expr</span>)(rc: <span class=\"hljs-type\">ExprA</span>[<span class=\"hljs-type\">Z</span>]): <span class=\"hljs-type\">Z</span> = <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">match</span> {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Lit</span>(v)    => rc.lit(v)\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Add</span>(l, r) => rc.add(foldRC(l)(rc), foldRC(r)(rc))\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Mul</span>(l, r) => rc.mul(foldRC(l)(rc), foldRC(r)(rc))\n}</code></pre>\n<p>さらにこれらを型クラスを使って実装することをTagless Finalという。<br>\n(おそらくRecursion Schme = final encodingでtaglessというのが型クラスを使うこと、みたいな。一番最初の<code>Expr</code>みたいな型をinitial encodingというっぽい)</p>\n<p>で、ここからさらに<code>Free</code>モナドってtagless finalだよねっていうのを確認していたけど、微妙によく分かっていない。<br>\n難しい‥‥。</p>\n<h3>DOT計算をやさしく説明する</h3>\n<p>DOT計算: Scala 3.0の核言語(Core Language)。</p>\n<p>Scalaの核言語の歴史:</p>\n<ul>\n<li>vObj計算 (2003-)</li>\n<li>Featherweight Scala (2006-)</li>\n<li>DOT計算 (2012-)</li>\n</ul>\n<p>核言語に必要なもの:</p>\n<ul>\n<li>抽象構文木</li>\n<li>型付け規則</li>\n<li>操作的意味論</li>\n</ul>\n<p>DOT特徴:</p>\n<ul>\n<li>Union型、Intersection型</li>\n<li>型メンバ</li>\n<li>Path-dependent type</li>\n<li>subtyping</li>\n</ul>\n<p>DOT計算の定義: <a href=\"https://github.com/namin/dot\">https://github.com/namin/dot</a></p>\n<p>DOT言語においての値はオブジェクトしかない。</p>\n<p>その他型付け規則などが定義されている‥‥。</p>\n<p>——時間が足りてない。</p>\n<h3>ハイパフォーマンスScala</h3>\n<p>スレッドの枯渇。コンテキストスイッチのコスト。GCのStop the World‥などが大きな問題。</p>\n<ul>\n<li>I/Oバウンドな処理に対する効率的なCPUの使用</li>\n<li>GCの停止時間を減らす</li>\n</ul>\n<p>IO対策: non-blocking IOの利用。</p>\n<p>GC: 適切なGCを選択。不用意なメモリを減らす。<br>\nメモリ使用料の減らし方:</p>\n<ul>\n<li>\n<p>適切なコレクションを使う。</p>\n<ul>\n<li>正しいコレクションを使うためにマイクロベンチマークを取る。</li>\n</ul>\n</li>\n<li>\n<p>オートボクシングに気を付ける</p>\n<ul>\n<li><code>@specialize</code>アノテーション</li>\n</ul>\n</li>\n<li>キャッシュのメモリ管理</li>\n</ul>\n<p>まあそうだよな、という感がつよい。</p>\n<h2>sbt コア・コンセプト</h2>\n<p><a href=\"https://www.scala-sbt.org/1.x/docs/sbt-by-example.html\">sbt by example</a>から入ると良い。</p>\n<p>\"Build System a la carte\"いわくビルドシステムとは\"automates repeatable tasks\"。</p>\n<p>sbt→カジュアルに関数型なビルドツール。(purelyとはちょっと違う)</p>\n<p>sbtでの状態(<code>State</code>): ビルド構造とディスクの状態</p>\n<p>コマンド: <code>State => State</code>。<br>\nコマンドは逐次処理される。<br>\nコマンドは<em>低レベルな概念</em>。</p>\n<p>コマンドの例: <code>commands</code>, <code>help</code>, <code>tasks</code>, <code>projects</code>, <code>set name := value</code>, <code>&#x3C;command1>; &#x3C;command2></code> (セミコロン), <code>++2.13</code> (<code>++</code>コマンド)</p>\n<p>あー、昔はセミコロンを最初に置かなきゃいけなかったのはセミコロンがコマンド扱いだったからなのか‥‥。<br>\n(<code>1.x</code>からは特殊扱いされるようになったっぽい？)</p>\n<p>コマンドの分類:</p>\n<ul>\n<li>あまり変更しないもの: <code>help</code>, <code>tasks</code></li>\n<li>ビルド構造を変更するもの: <code>project</code>, <code>set</code></li>\n<li>ディスクを変更するもの: <code>act</code></li>\n<li>どちらも変更するもの: <code>++</code></li>\n</ul>\n<p>サイドエフェクトが無いフリをしているビルドツール。<br>\n人間に返るのは実行結果のログで、ディスクの変更ではない。</p>\n<p>イベントと時間の関係: メッセージの送信→受信の順序がある<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>↛</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\not\\to b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>かつ<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>↛</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b \\not\\to a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>なイベントは互いに並列という</p>\n<p>sbtの<code>.value</code>は、このタスクの前に実行されるタスク or コマンドを宣言。<br>\nこの合成はApplicative。</p>\n<p>プラグイン開発者はタスクを使う。<br>\nタスクは自動合成。コマンド合成はsrareful (Stateの変化を伴う)。</p>\n<p>タスクの前にはsettingsのreloadが行われる。</p>\n<p><code>~</code>コマンド： ファイル監視。<code>~testQuick</code>で変わったテストだけ実行する。</p>\n<p>ビルド構造: サブプロジェクトの構造: Key-Valueストア。</p>\n<p>設定キー。<code>foo/Compile/console/scalacOptions</code>:</p>\n<ul>\n<li><code>foo</code>: subproject</li>\n<li><code>Compile</code>: configuration (<code>Test</code>, <code>Compile</code>)</li>\n<li><code>console</code>: in-task (タスクの中限定)</li>\n</ul>\n<p>設定キーの移譲ルールはよく分からん‥‥。</p>\n<p>カスタムキーは最も広いスコープで定義して、参照の際はなるべく狭くする。</p>\n<p>面白かった‥‥。</p>\n<h3>総括</h3>\n<p>Scala書きてえ‥‥。</p>\n<h2>福岡に着いた</h2>\n<p>ミリオン6th行くぞ。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1144540904503406592\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1144540904503406592</a></p>\n<p><a href=\"https://twitter.com/make_now_just/status/1144568804887822336\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1144568804887822336</a></p>\n<p>ちなみに夕飯は一双という店で食べた。<br>\n豚骨スープは美味いがやはり臭いと思う。</p>","fields":{"date":"2019-06-28"},"frontmatter":{"title":"ScalaMatsuri 2019"},"excerpt":"やったこと マギレコ 気の迷いで10連を回してしまった。 https://twitter.com/make_now_just/status/1144254417132281857 https://twitter.com/make_now_just/status/11442545…"},"prev":{"fields":{"date":"2019-06-29","slug":"/post/2019-06-29-diary/"},"frontmatter":{"title":"ミリオン6th福岡1日目現地"}},"next":{"fields":{"date":"2019-06-27","slug":"/post/2019-06-27-diary/"},"frontmatter":{"title":"秋葉原に行った"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2019-06-28-diary/","prevSlug":"/post/2019-06-29-diary/","nextSlug":"/post/2019-06-27-diary/"}}}