{"componentChunkName":"component---src-templates-post-js","path":"/post/2020-06-26-diary/","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>あつい</h2>\n<p>あつすぎる。<br>\nようやく体調が回復してきたのに暑さでダメになりそう。</p>\n<h2>ミリシタ</h2>\n<p>無限にメメントフルコンできんって言ってる。</p>\n<p>それはそうとワーキングで野球がはじまった。<br>\n野球‥‥ロコ‥‥。うーん。</p>\n<p>あと3周年。<br>\n面白くなってきた。秋葉行きたい‥‥。</p>\n<p><a href=\"https://milishita-3rdanv.idolmaster.jp/va/\" class=\"embedly-card\">https://milishita-3rdanv.idolmaster.jp/va/</a></p>\n<h2>Crystal</h2>\n<p>マクロのパス(定数・型)の解決がまったくレキシカルに行なわれてないのをどうにかしたい、という気持ちになっている。<br>\n正直言うと面倒なんだけど、今やらないまま1.0が出るのは非常にマズいと思うので。</p>\n<p>具体的には、すべての場合において「マクロ式中のパスの解決はレキシカルに(書いた場所に準拠して)行う」としたい。<br>\n現状こうなっているのはメソッド定義中にマクロ式を書いた場合だけなのだけど、この挙動に準拠したい、ということ。<br>\n実際、通常の式でパスの解決はレキシカルに行なわれるので、これは合理的だと思う。<br>\n例えば、以下のプログラムの実行結果は<code>:macro</code>でも<code>:runtime</code>でも<code>:Foo</code>が出力される。</p>\n<pre><code class=\"hljs language-crystal\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Foo</span></span>\n  A = :Foo\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">foo</span></span>\n    <span class=\"hljs-template-variable\">{% p [:<span class=\"hljs-function\"><span class=\"hljs-keyword\">macro</span>, <span class=\"hljs-title\">A</span></span>] %}</span>\n    p [:runtime, A]\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Bar</span></span>\n  A = :Bar\n\n  <span class=\"hljs-keyword\">include</span> Foo\n<span class=\"hljs-keyword\">end</span>\n\nBar.new.foo</code></pre>\n<p>一方、これがマクロの場合は、<code>:macro</code>では<code>:Bar</code>と出てコンパイル時にエラーになる。<br>\nコンパイル時にエラーになるのはグローバル空間に<code>A</code>が無いので当然なのだけど、マクロの中のマクロ式のパスの解決が<code>include</code>先のクラスからになっているのはおかしいんじゃないの？　ということ。</p>\n<pre><code class=\"hljs language-crystal\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Foo</span></span>\n  A = :Foo\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">macro</span> <span class=\"hljs-title\">foo</span></span>\n    <span class=\"hljs-template-variable\">{% p [:<span class=\"hljs-function\"><span class=\"hljs-keyword\">macro</span>, <span class=\"hljs-title\">A</span></span>] %}</span>\n    p [:runtime, A]\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Bar</span></span>\n  A = :Bar\n\n  <span class=\"hljs-keyword\">include</span> Foo\n<span class=\"hljs-keyword\">end</span>\n\nBar.foo</code></pre>\n<p>マクロの場合は継承などが絡まると問題になるだけなのだけど、hookの場合はどんなときでも呼び出し対象となったクラスをパスの解決のスコープとするので、さらにややこしい。<br>\nこれも統一したい。</p>\n<p>もちろん、これが直感的で完璧な挙動だとは思っていなくて、人によっては不満はあると思う。<br>\nが、現状の全く一貫していないよりは間違いなく良いし、パスの解決についてマクロだけを読めば結果が予測可能できるようになり、よりマクロが堅牢になるはずなので、自分はこの方針でいきたい。</p>\n<p>このタイミングでbreakingな挙動を入れることに反対する人もいるかもしれないけど、この変更は本来はバグ修正として行われるべき類のものだし、今このタイミングを逃して1.0になって変更できなくなることが問題。<br>\nあと、この変更で壊れるマクロがあるとしたら、継承先とかinclude先で特定の定数/型が宣言されていることを前提にしているわけで、かなり奇妙なケースなのでほとんどありえない、というのが自分の見解。<br>\n比較的そういったコードのありそうなORMマッパーのライブラリのコードを確認したりしたけど、実際、無さそうな雰囲気だった。</p>\n<hr>\n<p>というような感じのことを明日あたりissueで立てる。</p>","fields":{"date":"2020-06-26"},"frontmatter":{"title":"あつい‥‥"},"excerpt":"やったこと あつい あつすぎる。 ようやく体調が回復してきたのに暑さでダメになりそう。 ミリシタ 無限にメメントフルコンできんって言ってる。 それはそうとワーキングで野球がはじまった。 野球‥‥ロコ‥‥。うーん。 あと3周年。 面白くなってきた。秋葉行きたい‥‥。 https:…"},"prev":{"fields":{"date":"2020-06-27","slug":"/post/2020-06-27-diary/"},"frontmatter":{"title":"ミリオン5th DAY1の配信だった"}},"next":{"fields":{"date":"2020-06-25","slug":"/post/2020-06-25-diary/"},"frontmatter":{"title":"疲労がヤバい"}}},"pageContext":{"slug":"/post/2020-06-26-diary/","prevSlug":"/post/2020-06-27-diary/","nextSlug":"/post/2020-06-25-diary/"}}}