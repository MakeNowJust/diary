{"componentChunkName":"component---src-templates-post-js","path":"/post/2019-01-27-diary/","webpackCompilationHash":"2e4abd91987aa3c9db0d","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>diaryの芝に凡例を追加した</h2>\n<p>キャッシュ周りをいい感じにできたので、芝に凡例を追加してみた。<br>\nぶっちゃけ有っても無くてもどうでもいいのだけど。</p>\n<h2>てらちー氏、4869と会った</h2>\n<p>てらちー氏と話したいことはいくつかあったのだけど、忙しそうなので残念。あとでどうにかする。</p>\n<p>思ったより難しそうなのでどこかで時間を取らないとマズい。無理。</p>\n<p>上野のHUBとか赤からとか行った。そろそろ赤からに飽きる。悪くないけど。</p>\n<h1>思うこと</h1>\n<h2>LeanPropsの<code>Tiers</code>はMonadにならないのだろうか</h2>\n<p>諦めきれず未だに考察してる。</p>\n<p>まず分かったこととしていわゆる<code>ListT</code>を次のように定義した場合、<code>F</code>がMonadでも<code>ListT[F, ?]</code>がMonadになるとは限らないらしい。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ListT</span>[<span class=\"hljs-type\">F</span>[_], <span class=\"hljs-title\">A</span>](<span class=\"hljs-params\">value: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>]]</span>) <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AnyVal</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n<p>この場合で<code>ListT[F, ?]</code>がMonadになるのは、<code>F</code>が<a href=\"https://wiki.haskell.org/Monad#Commutative_monads\">commutativeな場合</a>に限るらしい。</p>\n<p>そこで、このように<code>ListT</code>を定義すると、<code>Functor</code>である<code>F</code>に対して<code>ListT</code>がMonadになるらしい。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">case</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ListT</span>[<span class=\"hljs-type\">F</span>[_], <span class=\"hljs-title\">A</span>](<span class=\"hljs-params\">value: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">Option</span>[<span class=\"hljs-type\">Either</span>[<span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">A</span>], (<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">A</span>]</span>)]]]) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">map</span></span>[<span class=\"hljs-type\">B</span>](f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>)(<span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-type\">F</span>: <span class=\"hljs-type\">Functor</span>[<span class=\"hljs-type\">F</span>]): <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">B</span>] = <span class=\"hljs-type\">ListT</span>(<span class=\"hljs-type\">F</span>.map(<span class=\"hljs-keyword\">this</span>.value) {\n  \t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">None</span>                => <span class=\"hljs-type\">None</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(l))       => <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(l.map(f)))\n  \t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Right</span>((a, l))) => <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Right</span>((f(a), l.map(f))))\n  })\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">flatMap</span></span>[<span class=\"hljs-type\">B</span>](f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">B</span>])(<span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-type\">F</span>: <span class=\"hljs-type\">Functor</span>[<span class=\"hljs-type\">F</span>]): <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">B</span>] = <span class=\"hljs-type\">ListT</span>(<span class=\"hljs-type\">F</span>.map(<span class=\"hljs-keyword\">this</span>.value) {\n  \t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">None</span>                => <span class=\"hljs-type\">None</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(l))       => <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(l.flatMap(f)))\n  \t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Right</span>((a, l))) => <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(f(a) ++ l.flatMap(f)))\n  })\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">++</span></span>(that: => <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">A</span>])(<span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-type\">F</span>: <span class=\"hljs-type\">Functor</span>[<span class=\"hljs-type\">F</span>]): <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">A</span>] = <span class=\"hljs-type\">ListT</span>(<span class=\"hljs-type\">F</span>.map(<span class=\"hljs-keyword\">this</span>.value) {\n  \t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">None</span>                => <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(that))\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(l))       => <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(l ++ that))\n  \t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Right</span>((a, l))) => <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Right</span>(a, l ++ that))\n  })\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">toList</span></span>(<span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-type\">F</span>: <span class=\"hljs-type\">Monad</span>[<span class=\"hljs-type\">F</span>]): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>]] = {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">loop</span></span>(l: <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">A</span>], as: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>]): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>]] =\n      <span class=\"hljs-type\">F</span>.flatMap(l.value) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">None</span>                 => <span class=\"hljs-type\">F</span>.point(as)\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Left</span>(l2))       => loop(l2, as)\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(<span class=\"hljs-type\">Right</span>((a, l2))) => loop(l2, a +: as)\n      }\n    <span class=\"hljs-type\">F</span>.map(loop(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-type\">List</span>.empty))(_.reverse)\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">ListT</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">empty</span></span>[<span class=\"hljs-type\">F</span>[_], <span class=\"hljs-type\">A</span>](<span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-type\">F</span>: <span class=\"hljs-type\">Applicative</span>[<span class=\"hljs-type\">F</span>]): <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">A</span>] = <span class=\"hljs-type\">ListT</span>[<span class=\"hljs-type\">F</span>, <span class=\"hljs-type\">A</span>](<span class=\"hljs-type\">F</span>.point(<span class=\"hljs-type\">None</span>))\n}</code></pre>\n<p>この<code>ListT</code>に<code>Stream</code>を入れると、見かけ上は少なくとも<code>Tiers</code>と同じ型になるな、と思ったのだけど、そこからがよく分からない、というか上手くいかない。</p>\n<p>あとこの実験用に定義したMonadとか。ひさしぶりにこんなん書いた。</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">import</span> scala.language.higherKinds\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Functor</span>[<span class=\"hljs-type\">F</span>[_]] </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">map</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](fa: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span>])(f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">B</span>]\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Functor</span> </span>{\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-keyword\">val</span> <span class=\"hljs-type\">ListFunctor</span>: <span class=\"hljs-type\">Functor</span>[<span class=\"hljs-type\">List</span>] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Functor</span>[<span class=\"hljs-type\">List</span>] {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">map</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](fa: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>])(f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">B</span>] = fa.map(f)\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Applicative</span>[<span class=\"hljs-type\">F</span>[_]] <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Functor</span>[<span class=\"hljs-type\">F</span>] </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">point</span></span>[<span class=\"hljs-type\">A</span>](a: <span class=\"hljs-type\">A</span>): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span>]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ap</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](ff: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>])(fa: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span>]): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">B</span>]\n  <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">map</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](fa: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span>])(f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">B</span>] = ap(point(f))(fa)\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Applicative</span> </span>{\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-keyword\">val</span> <span class=\"hljs-type\">ListApplicative</span>: <span class=\"hljs-type\">Applicative</span>[<span class=\"hljs-type\">List</span>] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Applicative</span>[<span class=\"hljs-type\">List</span>] {\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">map</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](fa: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>])(f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">B</span>] = fa.map(f)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">point</span></span>[<span class=\"hljs-type\">A</span>](a: <span class=\"hljs-type\">A</span>): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>] = <span class=\"hljs-type\">List</span>(a)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ap</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](ff: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>])(fa: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>]): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">B</span>] = <span class=\"hljs-keyword\">for</span> {\n      f &#x3C;- ff\n      a &#x3C;- fa\n    } <span class=\"hljs-keyword\">yield</span> f(a)\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Monad</span>[<span class=\"hljs-type\">F</span>[_]] <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Applicative</span>[<span class=\"hljs-type\">F</span>] </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">flatMap</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](fa: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span>])(f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">B</span>]): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">B</span>]\n  <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ap</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](ff: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>])(fa: <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">A</span>]): <span class=\"hljs-type\">F</span>[<span class=\"hljs-type\">B</span>] = flatMap(ff)(f => map(fa)(f))\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Monad</span> </span>{\n  <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-keyword\">val</span> <span class=\"hljs-type\">ListMonad</span>: <span class=\"hljs-type\">Monad</span>[<span class=\"hljs-type\">List</span>] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Monad</span>[<span class=\"hljs-type\">List</span>] {\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">map</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](fa: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>])(f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">B</span>] = fa.map(f)\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ap</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](ff: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">B</span>])(fa: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>]): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">B</span>] = <span class=\"hljs-keyword\">for</span> {\n      f &#x3C;- ff\n      a &#x3C;- fa\n    } <span class=\"hljs-keyword\">yield</span> f(a)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">point</span></span>[<span class=\"hljs-type\">A</span>](a: <span class=\"hljs-type\">A</span>): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>] = <span class=\"hljs-type\">List</span>(a)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">flatMap</span></span>[<span class=\"hljs-type\">A</span>, <span class=\"hljs-type\">B</span>](fa: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">A</span>])(f: <span class=\"hljs-type\">A</span> => <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">B</span>]): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">B</span>] = fa.flatMap(f)\n  }\n}</code></pre>","fields":{"date":"2019-01-27"},"frontmatter":{"title":"てらちー氏・4869と会った"},"excerpt":"やったこと diaryの芝に凡例を追加した キャッシュ周りをいい感じにできたので、芝に凡例を追加してみた。 ぶっちゃけ有っても無くてもどうでもいいのだけど。 てらちー氏、4869と会った てらちー氏と話したいことはいくつかあったのだけど、忙しそうなので残念。あとでどうにかする。…"},"prev":{"fields":{"date":"2019-01-28","slug":"/post/2019-01-28-diary/"},"frontmatter":{"title":"あした世界が終わるとしても、を観た"}},"next":{"fields":{"date":"2019-01-26","slug":"/post/2019-01-26-diary/"},"frontmatter":{"title":"PSYCHO-PASSの劇場版を観た"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2019-01-27-diary/","prevSlug":"/post/2019-01-28-diary/","nextSlug":"/post/2019-01-26-diary/"}}}