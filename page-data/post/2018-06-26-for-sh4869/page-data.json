{"componentChunkName":"component---src-templates-post-js","path":"/post/2018-06-26-for-sh4869/","webpackCompilationHash":"2085e9fc4dee5be01140","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>最初に</h1>\n<p>この記事は大体4869向けに書かれているので4869以外が読んで面白いのかは知りません。</p>\n<p>というかぶっちゃけ面倒くさいので、なぜ昨晩の自分がこんなことに首を突っ込んだのかと頭を抱えている。<br>\n（バッハの旋律を夜に聴いたせいです。）</p>\n<h1>4869の記事を読んで思ったこと</h1>\n<p>4869の記事というのはこれ。</p>\n<p><a href=\"https://blog.sh4869.net/post/2018/06/25/using-react-router-and-context-api/\" class=\"embedly-card\">https://blog.sh4869.net/post/2018/06/25/using-react-router-and-context-api/</a></p>\n<p>この記事は、<code>MainPage</code>から<code>UserPage</code>へとコンキストを使ってパラメーターを渡すようにしたのだけど、はたしてそれは良かったのか、という話だと思う。</p>\n<p>で、この方法が良いか悪いかというと悪いと思う。何かメリットは無いかと考えてはみたのだけど、結局思い付かなかった。<br>\n一応、記事に書いてあるメリットとしては、</p>\n<blockquote>\n<ul>\n<li><code>user/1</code>などの状態でリロードされても、親コンポーネントがデータを取得したあとに<code>Consumer</code>が受け取るデータが更新されるのでリロードが機能する</li>\n<li>基本的にはどこからアクセスされたかなどを気にする必要はない</li>\n<li>ReactRouterの黒魔術にあまり頼らなくてすむ</li>\n</ul>\n</blockquote>\n<p>とあるのだけど、別にコンテキストを使わなくても<code>UserPage</code>に<code>user</code>プロパティを追加して、<code>MainPage</code>が<code>user</code>を渡す形にすればいいと思う。<br>\nもしプロパティで渡すのでは上手くいかない事情があるのだとすれば、それは相当に複雑な問題だと思うので<code>react-redux</code>とか使った方がいい。</p>\n<p>そんな感じ。</p>\n<p>とはいえ、<code>MainPage</code>が渡す形だと困るパターンもある。<br>\n例えば、現状では<code>MainPage</code>が全<code>user</code>をとりあえず取ってくることになっているけど、それだとさすがに無駄があるので個別の<code>user</code>を読み込みたい、と考えることがあるかもしれない。<br>\nその場合、このやり方だと<code>MainPage</code>に個別の<code>user</code>を読み込むためのロジックが増えてしまってよくない。<br>\nそうならないためには、<code>user</code>を管理する部分をコンテキストとして持って、各ページでそれを参照するようにすればいい。</p>\n<p>という気持ちを一応実装してみた。</p>\n<p><a href=\"https://github.com/MakeNowJust-Labo/react-router-with-context\" class=\"embedly-card\">https://github.com/MakeNowJust-Labo/react-router-with-context</a></p>\n<p>こんな感じのAPIを持ったサーバーがあって、</p>\n<ul>\n<li><code>/users</code>でユーザーの一覧を返す。</li>\n<li><code>/user/:id</code>で個々のユーザーを返す。</li>\n</ul>\n<p>そのAPIを使うクライアントのSPAにはこんなページがある。<br>\n(APIサーバーとSPAを配信するサーバーは別）</p>\n<ul>\n<li><code>/</code>: トップページ。ユーザーの一覧を表示する。</li>\n<li><code>/user/:id</code>: 個々のユーザーのページ。</li>\n</ul>\n<p>当然、各ページを開く際にはAPIの呼び出しが非同期に行われる。サーバーのレスポンスを意図的に遅くしてるのでLoading...とか表示されるから、読み込みが入ればすぐに分かると思う。</p>\n<p><code>/</code>から<code>/user/:id</code>なページに遷移する場合には<code>/</code>を開いたタイミングでそのユーザーの情報も取得できているので読み込みは行なわれない。<br>\nしかし<code>/usrt/:id</code>で再読み込みしてから<code>/</code>に移動する場合は、個々のユーザーの情報では一覧を表示できないので、読み込みが発生する、という感じの挙動をする。</p>\n<p>リポジトリをcloneして<code>yarn</code>して<code>yarn dev:server</code>と<code>yarn dev:client</code>すれば動くので確認してみてほしい。</p>\n<p>本当はもっと色々書こうと思ったのだけど面倒になってので雑です。以上。</p>","fields":{"date":"2018-06-26"},"frontmatter":{"title":"『React RouterとContext APIを組み合わせて使う』を読んで思ったことなど"},"excerpt":"最初に この記事は大体4869向けに書かれているので4869以外が読んで面白いのかは知りません。 というかぶっちゃけ面倒くさいので、なぜ昨晩の自分がこんなことに首を突っ込んだのかと頭を抱えている。 （バッハの旋律を夜に聴いたせいです。） 4869の記事を読んで思ったこと 486…"},"prev":{"fields":{"date":"2018-06-27","slug":"/post/2018-06-27-diary/"},"frontmatter":{"title":"UNDER THE DOGを観た"}},"next":{"fields":{"date":"2018-06-26","slug":"/post/2018-06-26-diary/"},"frontmatter":{"title":"Reactひさしぶりすぎた"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2018-06-26-for-sh4869/","prevSlug":"/post/2018-06-27-diary/","nextSlug":"/post/2018-06-26-diary/"}}}