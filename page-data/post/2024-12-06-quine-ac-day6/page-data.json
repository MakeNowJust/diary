{"componentChunkName":"component---src-templates-post-js","path":"/post/2024-12-06-quine-ac-day6/","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>DAY 6</h1>\n<p><a href=\"https://www.unison-lang.org\">Unison</a>というプログラミング言語があります。<br>\nHaskell系の構文の言語で、<code>do</code> 記法などもありかなりHaskellっぽいです。<br>\neffectをabilityという枠組みで管理しているのは面白そうです。<br>\nただ、プロジェクト管理の部分と言語が密結合していて、あまり広くは受け入れられなさそうな雰囲気があります。</p>\n<p>Quineは適当に書きました。<br>\nトリプルクオートで <code>\"\"\"</code> で複数行の文字列リテラルになるので、それをいい感じに使いました。</p>\n<pre><code class=\"hljs language-haskell\"><span class=\"hljs-title\">code</span> = <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n\nmain : '{IO, Exception} ()\nmain = do printLine (Text.join \"</span><span class=\"hljs-string\">\" [\n  \"</span>code = <span class=\"hljs-string\">\",\n  fromCharList [?\"</span>, ?<span class=\"hljs-string\">\", ?\"</span>],\n  <span class=\"hljs-type\">Text</span>.take <span class=\"hljs-number\">1</span> code,\n  code,\n  <span class=\"hljs-type\">Text</span>.take <span class=\"hljs-number\">1</span> code,\n  fromCharList [?<span class=\"hljs-string\">\", ?\"</span>, ?<span class=\"hljs-string\">\"],\n  Text.take 1 code,\n  code,\n])\n\"</span><span class=\"hljs-string\">\"\"</span>\n\n<span class=\"hljs-title\">main</span> : '{<span class=\"hljs-type\">IO</span>, <span class=\"hljs-type\">Exception</span>} ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span> printLine (<span class=\"hljs-type\">Text</span>.join <span class=\"hljs-string\">\"\"</span> [\n  <span class=\"hljs-string\">\"code = \"</span>,\n  fromCharList [?<span class=\"hljs-string\">\", ?\"</span>, ?<span class=\"hljs-string\">\"],\n  Text.take 1 code,\n  code,\n  Text.take 1 code,\n  fromCharList [?\"</span>, ?<span class=\"hljs-string\">\", ?\"</span>],\n  <span class=\"hljs-type\">Text</span>.take <span class=\"hljs-number\">1</span> code,\n  code,\n])</code></pre>\n<p>実行が面倒で、プロジェクトを作る必要があります。</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">utm</span>\n<span class=\"hljs-meta prompt_\">> </span><span class=\"bash\">project.create quine</span>\n<span class=\"hljs-meta prompt_\">> </span><span class=\"bash\">load quine.u</span>\n<span class=\"hljs-meta prompt_\">> </span><span class=\"bash\">add</span>\n<span class=\"hljs-meta prompt_\">> </span><span class=\"bash\">compile main quine</span>\n<span class=\"hljs-meta prompt_\">> </span><span class=\"bash\"><span class=\"hljs-built_in\">exit</span></span>\n<span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">utm run.compile quine.uc | diff quine.u -</span></code></pre>\n<p>言語を覚える前にツールを覚えなきゃいけないのはしんどいなぁ。</p>","fields":{"date":"2024-12-06"},"frontmatter":{"title":"DAY 6 - Unison (Quine AC 2024)"},"excerpt":"DAY 6 Unisonというプログラミング言語があります。 Haskell系の構文の言語で、do 記法などもありかなりHaskellっぽいです。 effectをabilityという枠組みで管理しているのは面白そうです。 ただ、プロジェクト管理の部分と言語が密結合していて、あま…"},"prev":{"fields":{"date":"2024-12-07","slug":"/post/2024-12-07-quine-ac-day7/"},"frontmatter":{"title":"DAY 7 - Vedic (Quine AC 2024)"}},"next":{"fields":{"date":"2024-12-06","slug":"/post/2024-12-06-diary/"},"frontmatter":{"title":"テラスタルフェスexを開封した"}}},"pageContext":{"slug":"/post/2024-12-06-quine-ac-day6/","prevSlug":"/post/2024-12-07-quine-ac-day7/","nextSlug":"/post/2024-12-06-diary/"}},"staticQueryHashes":["1213933803","2548877431"],"slicesMap":{}}