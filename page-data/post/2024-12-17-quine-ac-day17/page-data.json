{"componentChunkName":"component---src-templates-post-js","path":"/post/2024-12-17-quine-ac-day17/","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>DAY 17</h1>\n<p><a href=\"https://github.com/adam-mcdaniel/oakc\">Oak</a>というプログラミング言語があります。<br>\nRustっぽい文法ですが、17種類の命令を持つIRを介して、C言語やGo言語のバックエンドでコンパイルできる言語のようです。<br>\nスタックマシンっぽい命令です。これで何でもコンパイルするのは流石に効率が悪いのではないか？<br>\n標準ライブラリがちょっと足りてない感じがします。</p>\n<p>Quineは<code>putstr</code>と<code>putchar</code>はあったのでそれで書きました。<br>\n<code>for</code>文が微妙に不便で初期化部分を省けないので、適当な文を置いておきました。</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[std]</span>\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s</span> = <span class=\"hljs-string\">\"#[std]\n\nfn main() {\n  let s = %;\n  let i = 0;\n  for (i = 0; s[i] != '%'; i = i + 1) {\n    putchar(s[i]);\n  }\n  putchar(34 as char);\n  putstr(s);\n  putchar(34 as char);\n  for (i = i + 1; s[i] != (0 as char); i = i + 1) {\n    putchar(s[i]);\n  }\n}\n\"</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">i</span> = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-title function_ invoke__\">for</span> (i = <span class=\"hljs-number\">0</span>; s[i] != <span class=\"hljs-string\">'%'</span>; i = i + <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-title function_ invoke__\">putchar</span>(s[i]);\n  }\n  <span class=\"hljs-title function_ invoke__\">putchar</span>(<span class=\"hljs-number\">34</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>);\n  <span class=\"hljs-title function_ invoke__\">putstr</span>(s);\n  <span class=\"hljs-title function_ invoke__\">putchar</span>(<span class=\"hljs-number\">34</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>);\n  <span class=\"hljs-title function_ invoke__\">for</span> (i = i + <span class=\"hljs-number\">1</span>; s[i] != (<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>); i = i + <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-title function_ invoke__\">putchar</span>(s[i]);\n  }\n}</code></pre>\n<p>拡張子は <code>.ok</code> みたいです。<br>\nコンパイルすると <code>main</code> という実行ファイルができるので、それを実行します。</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"bash\">oak c quine.ok &#x26;&#x26; ./main | diff quine.ok -</span></code></pre>\n<p>ちなみに <code>oak -g c</code> とするとGo言語バックエンドでコンパイルされるみたいです。</p>","fields":{"date":"2024-12-17"},"frontmatter":{"title":"DAY 17 - Oak (Quine AC 2024)"},"excerpt":"DAY 17 Oakというプログラミング言語があります。 Rustっぽい文法ですが、17種類の命令を持つIRを介して、C言語やGo言語のバックエンドでコンパイルできる言語のようです。 スタックマシンっぽい命令です。これで何でもコンパイルするのは流石に効率が悪いのではないか？ 標…"},"prev":{"fields":{"date":"2024-12-18","slug":"/post/2024-12-18-quine-ac-day18/"},"frontmatter":{"title":"DAY 18 - Oak (Quine AC 2024)"}},"next":{"fields":{"date":"2024-12-17","slug":"/post/2024-12-17-diary/"},"frontmatter":{"title":"論文を書いていく"}}},"pageContext":{"slug":"/post/2024-12-17-quine-ac-day17/","prevSlug":"/post/2024-12-18-quine-ac-day18/","nextSlug":"/post/2024-12-17-diary/"}},"staticQueryHashes":["1213933803","2548877431"],"slicesMap":{}}