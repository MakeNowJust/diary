{"componentChunkName":"component---src-templates-post-js","path":"/post/2019-06-10-diary/","webpackCompilationHash":"49a09c363d761c6c9e53","result":{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>fruity love最終日</h2>\n<p>色々あって166000ptでfinish。</p>\n<p><a href=\"https://twitter.com/make_now_just/status/1138052111785029633\" class=\"embedly-card\">https://twitter.com/make_now_just/status/1138052111785029633</a></p>\n<p>若干微妙な気もするけど、多分大丈夫だと思う。タブンネ‥‥。</p>\n<h2>react-cytoscape-renderer反省会</h2>\n<p>やっぱ無理だという結論になったcytoscape.jsのReactレンダラを作るやつの反省会。</p>\n<p>まず、何をやろうとしていたのか、という話から。<br>\n完成イメージとしてはこんな感じだった。</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span>;\n<span class=\"hljs-keyword\">import</span> {Cytoscape, Node, Edge} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-cytoscape-renderer'</span>;\n\n<span class=\"hljs-keyword\">const</span> stylesheet = [\n  {<span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">':compound'</span>, <span class=\"hljs-attr\">style</span>: {<span class=\"hljs-string\">'background-color'</span>: <span class=\"hljs-string\">'#ddd'</span>}},\n  {<span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'node'</span>, <span class=\"hljs-attr\">style</span>: {<span class=\"hljs-string\">'background-color'</span>: <span class=\"hljs-string\">'#666'</span>, <span class=\"hljs-string\">'label'</span>: <span class=\"hljs-string\">'data(id)'</span>}},\n  {<span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'edge'</span>, <span class=\"hljs-attr\">style</span>: { <span class=\"hljs-string\">'width'</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'line-color'</span>: <span class=\"hljs-string\">'#ccc'</span>, <span class=\"hljs-string\">'target-arrow-color'</span>: <span class=\"hljs-string\">'#ccc'</span>, <span class=\"hljs-string\">'target-arrow-shape'</span>: <span class=\"hljs-string\">'triangle'</span>}},\n];\n\n<span class=\"hljs-keyword\">const</span> Main = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Cytoscape</span> <span class=\"hljs-attr\">stylesheet</span>=<span class=\"hljs-string\">{stylesheet}</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{width:</span> '<span class=\"hljs-attr\">800px</span>', <span class=\"hljs-attr\">height:</span> '<span class=\"hljs-attr\">600px</span>'}}></span>\n    </span>&#x3C;Node data={{id: 'hello-world'}}>\n      &#x3C;Node data={{id: 'hello'}} />\n      &#x3C;Node data={{id: 'world'}} />\n      &#x3C;Edge data={{source: 'hello', target: 'world'}} />\n    &#x3C;/Node>\n  &#x3C;/Cytoscape>\n);\n\nReactDOM.render(&#x3C;Main />, document.querySelector('#main'));</code></pre>\n<p><code>&#x3C;Cytoscape></code>コンポーネントの中にある<code>&#x3C;Node></code>とか<code>&#x3C;Edge></code>は通常のコンポーネントではなくて、<code>&#x3C;Cytoscape></code>コンポーネント内でcytoscape.js用のレンダラで描画される、というのがポイント。<br>\nあとネストした<code>&#x3C;Node></code>はcytoscape.jsのcompoundノードとして解釈される、というイメージ。</p>\n<p>これをTypeScriptで実装してた。</p>\n<h3>ダメだったところ</h3>\n<p>はじめに何が失敗だったのまとめていく。</p>\n<p>まずcytoscape.jsはノードとかエッジの生成<strong>だけ</strong>をすることができなくて、必ず同時にグラフに追加しなきゃいけない、という制約があった。<br>\nこれが地味に大きな問題点。</p>\n<p>加えて、ノードとエッジの関係が結構厳しい。</p>\n<ul>\n<li><code>id</code>が重複すると即座に例外が飛ぶ。</li>\n<li><code>id</code>を変更できない。</li>\n<li>エッジの<code>source</code>と<code>target</code>のノードはエッジを追加するときに存在しなければいけない。</li>\n<li>ノードを削除すると、そのノードにつながっているエッジも削除される。</li>\n</ul>\n<p>とまあ、この辺りが面倒くさい。</p>\n<p><code>id</code>の重複は、例えばあるノードを別のノードの子ノードとして移動した場合に、削除→追加の順で行われれば上手くいくのだけど、追加→削除の順になってしまうと同じ<code>id</code>のノードが一時的に複数存在してしまい例外が発生する。<br>\nエッジが<code>source</code>と<code>target</code>のノードを要求するのも、エッジの追加処理が先に行われる場合に起こるので、ノードから追加されることを保証しなきゃいけなくて面倒。</p>\n<p>とはいえ、ここまでの問題は追加・削除の操作をキューして、削除→追加の順で一律に行うようにすれば回避できる気がする。</p>\n<p>もっと本質的な問題は<code>id</code>が変更できないことと、ノードを削除するとつながっているエッジも削除されてしまうところだったりする。</p>\n<p><code>id</code>が変更できないのは面倒。cytoscape.jsが返すオブジェクトを適当にラップしておいて、<code>id</code>を変更しなきゃいけないときは今の要素を新しい<code>id</code>で上書きしてコピーしてから削除する、みたいなことをすればどうにかなるかもしれない。</p>\n<p>ノードを削除する\u001cとつながっているエッジも削除されてしまうのは、ノードだけを削除すると、Reactの仮想DOM上には存在するのに、実際には存在しないエッジが生まれてしまうのが面倒。多分、そういったノードが生まれてしまったらエラーにしなきゃいけないと思うのだけど、チェックするのが大変な気がする。</p>\n<p>という感じ。特に最後のやつがどうしようもない気がしたので諦めた。</p>\n<p>根本的な問題は、ノードの親子関係はツリー構造だけど、エッジはツリー構造ではない、というところな気がする。難しい。</p>\n<h3>良かったところ・分かったところ</h3>\n<p>とはいえ、コンセプトはそんなに悪くなかったんじゃないかと思っている。<br>\n今回やってみて色々分かった部分もあるので、その辺りをまとめていく。</p>\n<p>良かったところ;</p>\n<ul>\n<li>compoundなノードの関係をノードのネストで表現できたのは良いところだと思う。反面、ノードの中のエッジなどに意味が無くなってしまったのはよくなかった。</li>\n<li>ノードやエッジに直接イベントを設定できるところ。普通に分かりやすくて良い。ただ、グラフの可視化という目的だと使わないかも、</li>\n</ul>\n<p>分かったこと:</p>\n<ul>\n<li>Reactのレンダラの書き方。意外とやってみれば書ける。</li>\n<li>\n<p>TypeScriptでReactのレンダラを書く技術。</p>\n<ul>\n<li><code>HostConfig</code>という型が重要なのだけど、型引数がいっぱいあって分かりづらい。何となく名前で分かる。</li>\n<li>React本体の型はしっかりしてるけど、Reconciler周りは怪しい部分もある。オプショナルなはずの引数が必須扱いだったり——。そんなに困らないけど。</li>\n</ul>\n</li>\n<li>\n<p>TypeScriptでcytoscape.jsを書く技術。</p>\n<ul>\n<li>型定義が全体的に足りてなかったり間違ってしたりしてつらい。気が向いたらコントリビュートしたい。</li>\n</ul>\n</li>\n<li>その他、Reactの仮想DOMを使ってツリーっぽい構造を制御する方法。今回は使ってないけど、<a href=\"https://github.com/drcmda/react-zdog\">react-zdog</a>みたいにコンポーネントのライフサイクルで副作用を起こして管理する、というのも面白い。</li>\n</ul>\n<p>思うところをまとめるのは大事。なんかReactのレンダラ作りたいな。</p>","fields":{"date":"2019-06-10"},"frontmatter":{"title":"react-cytoscape-renderer反省会"},"excerpt":"やったこと fruity love最終日 色々あって166000ptでfinish。 https://twitter.com/make_now_just/status/1138052111785029633 若干微妙な気もするけど、多分大丈夫だと思う。タブンネ‥‥。 react…"},"prev":{"fields":{"date":"2019-06-11","slug":"/post/2019-06-11-diary/"},"frontmatter":{"title":"ミリシタの生放送を観た"}},"next":{"fields":{"date":"2019-06-09","slug":"/post/2019-06-09-diary/"},"frontmatter":{"title":"ミリシタしてた"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/2019-06-10-diary/","prevSlug":"/post/2019-06-11-diary/","nextSlug":"/post/2019-06-09-diary/"}}}