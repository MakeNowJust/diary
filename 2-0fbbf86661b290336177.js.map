{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/lawn.js","webpack:///./src/components/header.js","webpack:///./src/components/footer.js","webpack:///./src/containers/layout.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","data","query","render","finalData","Fragment","StaticQuery","props","children","Consumer","MONTH_NAMES","Lawn","posts","today","lawnData","end","Date","getTime","setHours","setMinutes","setSeconds","setMilliseconds","start","setFullYear","getFullYear","setDate","getDate","getDay","totalDays","Math","floor","x","i","date","day","y","push","slug","size","GRASS_SIZE","s","textSize","split","map","Number","parseInt","m","d","length","months","lastMonth","getMonth","grasses","grass","classNames","activeness","min","max","log2","styles","active","onClick","navigate","inactive","month","key","className","text","MARGIN","toISOString","height","width","join","container","WIDTH","HEIGHT","legend","box","active0","active1","active2","active3","Header","title","quote","navBar","navBarTitle","to","nav","icon","faSearch","Footer","author","github","year","firstName","restNames","copyright","href","Layout","Helmet","lang","site","siteMetadata","language","allMarkdownRemark","edges","node","fields","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"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","file":"2-0fbbf86661b290336177.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import {navigate} from 'gatsby';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './lawn.module.scss';\n\nconst DAY_MS = 24 * 3600 * 1000;\n\nconst MARGIN = 2;\nconst GRASS_SIZE = 12;\nconst WIDTH = MARGIN + (GRASS_SIZE + MARGIN) * 54;\nconst HEIGHT = MARGIN + (GRASS_SIZE + MARGIN) * (7 + 1);\n\nconst MONTH_NAMES = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nconst Lawn = ({posts, today}) => {\n  const lawnData = [];\n  const end = new Date(today.getTime());\n  end.setHours(0);\n  end.setMinutes(0);\n  end.setSeconds(0);\n  end.setMilliseconds(0);\n  const start = new Date(end.getTime());\n  start.setFullYear(start.getFullYear() - 1);\n  start.setDate(start.getDate() - start.getDay());\n  const totalDays = Math.floor((end.getTime() - start.getTime()) / DAY_MS);\n\n  let x = MARGIN;\n  for (let i = 0; i <= totalDays; i++) {\n    const date = new Date(start.getTime());\n    date.setDate(date.getDate() + i);\n    const day = date.getDay();\n    const y = MARGIN + (GRASS_SIZE + MARGIN) * (day + 1);\n    lawnData.push({x, y, slug: null, size: 0, date});\n    if (day === 6) {\n      x += GRASS_SIZE + MARGIN;\n    }\n  }\n\n  for (const {date: s, slug, textSize} of posts) {\n    const [y, m, d] = s.split('-').map(s => Number.parseInt(s, 10));\n    const date = new Date(y, m - 1, d);\n    const i = Math.floor((date.getTime() - start.getTime()) / DAY_MS);\n\n    if (i >= lawnData.length) {\n      continue;\n    }\n\n    if (i < 0) {\n      break;\n    }\n\n    lawnData[i].slug = slug;\n    lawnData[i].size += textSize;\n  }\n\n  const months = [];\n  let lastMonth = lawnData[0].date.getMonth();\n\n  const grasses = lawnData.map(grass => {\n    const props = {};\n    const classNames = [];\n    if (grass.slug) {\n      const activeness = Math.min(Math.max(7, Math.floor(Math.log2(grass.size))), 10) - 7;\n      classNames.push(styles.active, styles[`active${activeness}`]);\n      props.onClick = () => navigate(grass.slug);\n    } else {\n      classNames.push(styles.inactive);\n    }\n\n    const month = grass.date.getMonth();\n    if (month !== lastMonth) {\n      months.push(\n        <text key={grass.date} className={styles.text} x={grass.x} y={MARGIN + GRASS_SIZE}>\n          {MONTH_NAMES[month]}\n        </text>,\n      );\n      lastMonth = month;\n    }\n\n    return (\n      <rect\n        key={grass.date.toISOString()}\n        height={GRASS_SIZE}\n        width={GRASS_SIZE}\n        x={grass.x}\n        y={grass.y}\n        className={classNames.join(' ')}\n        {...props}\n      >\n        {grass.slug && <title>{grass.slug}</title>}\n      </rect>\n    );\n  });\n\n  return (\n    <>\n      <div className={styles.container}>\n        <svg width={`${WIDTH}px`} height={`${HEIGHT}px`}>\n          {months}\n          {grasses}\n        </svg>\n      </div>\n      <ul className={styles.legend}>\n        <li>Less</li>\n        <li className={`${styles.inactive} ${styles.box}`} />\n        <li className={`${styles.active0} ${styles.box}`} />\n        <li className={`${styles.active1} ${styles.box}`} />\n        <li className={`${styles.active2} ${styles.box}`} />\n        <li className={`${styles.active3} ${styles.box}`} />\n        <li>More</li>\n      </ul>\n    </>\n  );\n};\n\nLawn.propTypes = {\n  /** Post summaries. They should be sorted descending date order. */\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      slug: PropTypes.string.isRequired,\n      textSize: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  /** A `Date` object which means rightmost of this lawn. */\n  today: PropTypes.instanceOf(Date).isRequired,\n};\n\nexport default Lawn;\n","import {Link} from 'gatsby';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSearch} from '@fortawesome/free-solid-svg-icons';\n\nimport Lawn from './lawn';\nimport styles from './header.module.scss';\n\nconst Header = ({title, quote, posts, today}) => (\n  <header className={styles.container}>\n    <div className={styles.navBar}>\n      <h1 className={styles.navBarTitle}>\n        <Link to=\"/\">{title}</Link>\n      </h1>\n      <nav className={styles.nav}>\n        <ul>\n          <li>\n            <Link to=\"/search/\" title=\"検索\">\n              <FontAwesomeIcon icon={faSearch} />\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n    <h1 className={styles.title}>\n      <Link to=\"/\">{title}</Link>\n    </h1>\n    <p className={styles.quote}>{quote}</p>\n    <Lawn posts={posts} today={today} />\n  </header>\n);\n\nHeader.propTypes = {\n  /** A diary title. */\n  title: PropTypes.string.isRequired,\n  /** A quote show under title. */\n  quote: PropTypes.string.isRequired,\n  /** Post summaries. It passes to `Lawn`. */\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      slug: PropTypes.string.isRequired,\n      textSize: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  /** A today `Date` object. It passes to `Lawn`. */\n  today: PropTypes.instanceOf(Date).isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './footer.module.scss';\n\nconst Footer = ({author, github, year}) => {\n  const [firstName, ...restNames] = author.split(' ');\n\n  return (\n    <footer>\n      <p className={styles.copyright}>\n        © {year} {firstName} \"<a href={`https://github.com/${github}`}>{github}</a>\"{' '}\n        {restNames.join(' ')}\n      </p>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  /** A diary author. */\n  author: PropTypes.string.isRequired,\n  /** A diary author's GitHub user name. */\n  github: PropTypes.string.isRequired,\n  /** A copyright year. */\n  year: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import {StaticQuery, graphql} from 'gatsby';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Helmet} from 'react-helmet';\n\nimport Header from '../components/header';\nimport Footer from '../components/footer';\n\nimport 'modern-normalize';\nimport 'typeface-nova-mono';\nimport 'typeface-nova-square';\nimport 'typeface-raleway';\nimport 'katex/dist/katex.min.css';\n\nimport '../styles/global.scss';\n\nconst Layout = ({children}) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            quote\n            language\n            copyright {\n              author\n              github\n              year\n            }\n          }\n        }\n\n        allMarkdownRemark(sort: {fields: [fields___slug], order: DESC}) {\n          edges {\n            node {\n              fields {\n                date\n                slug\n                textSize\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet>\n          <html lang={data.site.siteMetadata.language} />\n        </Helmet>\n        <Header\n          title={data.site.siteMetadata.title}\n          quote={data.site.siteMetadata.quote}\n          posts={data.allMarkdownRemark.edges.map(({node}) => ({\n            date: node.fields.date,\n            slug: node.fields.slug,\n            textSize: node.fields.textSize,\n          }))}\n          today={new Date()}\n        />\n        <main>{children}</main>\n        <Footer\n          author={data.site.siteMetadata.copyright.author}\n          github={data.site.siteMetadata.copyright.github}\n          year={data.site.siteMetadata.copyright.year}\n        />\n      </>\n    )}\n  />\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}