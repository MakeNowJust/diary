{"data":{"site":{"siteMetadata":{"title":"℘ make now just"}},"markdownRemark":{"html":"<h1>やったこと</h1>\n<h2>これまで</h2>\n<p>この一週間くらい日記を書いていなかった。<br>\nその間にBLEACHの実写映画を観たりした。普通に面白かったし漫画を一度読んでみたい。しかし巻数多い‥‥。</p>\n<p>やってたことは大体記録してあるので書こうと思えば書けるのだけど面倒なのでパス。<br>\nとりあえず、これからのことを考えると胃が痛くなる感じ。coo。</p>\n<h2>eenextを公開した</h2>\n<p><a href=\"https://github.com/MakeNowJust/eenext\" class=\"embedly-card\">https://github.com/MakeNowJust/eenext</a></p>\n<p>TypeScriptで<code>EventEmitter</code>を実装したのでeenextという名前でNPMにpublishした。ひさしぶりにNPMに公開した気がする。NPMに公開するベストプラクティスは未だによく分からない。</p>\n<p>このeenextの面白いところは二つある。</p>\n<p>一つはしっかりと型が付くところ。</p>\n<p><code>EventEmitter</code>の型引数に<code>Events</code>を渡しているのがポイント。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> EventEmitter <span class=\"token keyword\">from</span> <span class=\"token string\">'eenext'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Events</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  end<span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ee <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token operator\">&lt;</span>Events<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>end<span class=\"token punctuation\">:</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>こうすると<code>on</code>とか<code>once</code>とか<code>emit</code>するときに型が付くようになる。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// こういうのはコンパイルが通る</span>\nee<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// こういうのはダメ</span>\nee<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'no event'</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'no event'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>あと、型が<code>void</code>なイベント名の場合は<code>emit</code>のときに値の部分を省略できるのもポイント。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">ee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これはOK</span>\nee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// こっちはダメ</span></code></pre></div>\n<p>もう一つは、<code>on</code>とか<code>once</code>でイベントリスナを渡すのを省略した場合に<code>AsyncIterator</code>とか<code>Promise</code>を返すところ。</p>\n<p><code>AsyncIterator</code>は<code>for await ~ of</code>でループできるやつ。最近のNode.jsは対応してるので何か動く。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 'emit'が発火するのを待つ</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ee<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token function\">awit</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> ee<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1st'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2nd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3rd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nee<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>その他地味に面白いところとして、<code>emit</code>が非同期に実行される。こうするとイベントリスナ中でイベントを発火させてもビジーループにならないのでちょっと便利な気がする。<br>\nどうしても同期したい場合は<code>emit</code>が<code>Promise</code>を返すのでそれを<code>await</code>すればいいはず。</p>\n<h2>ラブライブを観てる</h2>\n<p>シンデレラガールズを観たので勢いで見始めてしまった。</p>\n<p>今度こそ最後まで観たい。</p>","fields":{"date":"2018-07-28"},"frontmatter":{"title":"eenextを公開した"},"excerpt":"やったこと これまで この一週間くらい日記を書いていなかった。 その間にBLEACHの実写映画を観たりした。普通に面白かったし漫画を一度読んでみたい。しかし巻数多い‥‥。 やってたことは大体記録してあるので書こうと思えば書けるのだけど面倒なのでパス。 とりあえず、これからのこと…"},"prev":{"fields":{"date":"2018-07-29","slug":"/post/2018-07-29-diary/"},"frontmatter":{"title":"神田明神に行った"}},"next":{"fields":{"date":"2018-07-20","slug":"/post/2018-07-20-diary/"},"frontmatter":{"title":"未来のミライを観た"}}},"pageContext":{"slug":"/post/2018-07-28-diary/","prevSlug":"/post/2018-07-29-diary/","nextSlug":"/post/2018-07-20-diary/"}}